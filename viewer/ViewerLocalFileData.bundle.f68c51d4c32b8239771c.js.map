{"version":3,"sources":["webpack:///./connectedComponents/ViewerLocalFileData.js","webpack:///./lib/localFileLoaders/fileLoader.js","webpack:///./lib/localFileLoaders/pdfFileLoader.js","webpack:///./lib/localFileLoaders/dicomFileLoader.js","webpack:///./lib/localFileLoaders/fileLoaderService.js","webpack:///./lib/filesToStudies.js"],"names":["OHIFStudyMetadata","metadata","studyMetadataManager","utils","dropZoneLinkDialog","onDrop","i18n","dir","noDrag","getRootProps","getInputProps","className","webkitdirectory","mozdirectory","ViewerLocalFileData","studies","loading","error","purge","updatedStudies","map","study","studyMetadata","StudyInstanceUID","sopClassHandlerModules","extensionManager","modules","displaySets","createDisplaySets","forEachDisplaySet","displayset","localFile","add","setState","acceptedFiles","filesToStudies","updateStudies","this","state","JSON","stringify","noClick","style","width","height","studyInstanceUIDs","a","props","t","linksDialogMessage","Component","PropTypes","array","withTranslation","FileLoader","file","imageId","image","dataset","PDFFileLoader","cornerstoneWADOImageLoader","wadouri","loadFileRequest","getDefaultStudy","StudyDate","StudyTime","AccessionNumber","ReferringPhysicianName","PatientName","PatientID","PatientBirthdate","PatientSex","StudyId","StudyDescription","series","SeriesInstanceUID","SeriesDescription","SeriesNumber","instances","SOPInstanceUID","SOPClassUID","Rows","Columns","NumberOfFrames","InstanceNumber","getImageId","isLocalFile","metadataProvider","OHIF","cornerstone","DICOMFileLoader","dicomData","dcmjs","data","DicomMessage","readFile","DicomMetaDictionary","naturalizeDataset","dict","addInstance","_meta","namifyDataset","meta","e","console","getStudyFromDataset","PatientBirthDate","StudyID","instance","url","FileLoaderService","fileType","type","loader","getLoader","groupBy","list","groupByKey","listKey","nonKeyCounter","reduce","acc","obj","key","push","Object","values","studyGroup","seriesGrouped","fileManager","loadFile","getDataset","getStudies","processFile","fileLoaderService","addFile","log","name","message","files","processFilesPromises","Promise","all","groupSeries","flat"],"mappings":"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","file":"ViewerLocalFileData.bundle.f68c51d4c32b8239771c.js","sourcesContent":["import React, { Component } from 'react';\nimport { metadata, utils } from '@ohif/core';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport Dropzone from 'react-dropzone';\nimport filesToStudies from '../lib/filesToStudies';\nimport './ViewerLocalFileData.css';\nimport { withTranslation } from 'react-i18next';\n\nconst { OHIFStudyMetadata } = metadata;\nconst { studyMetadataManager } = utils;\n\nconst dropZoneLinkDialog = (onDrop, i18n, dir) => {\n  return (\n    <Dropzone onDrop={onDrop} noDrag>\n      {({ getRootProps, getInputProps }) => (\n        <span {...getRootProps()} className=\"link-dialog\">\n          {dir ? (\n            <span>\n              {i18n('Load folders')}\n              <input\n                {...getInputProps()}\n                webkitdirectory=\"true\"\n                mozdirectory=\"true\"\n              />\n            </span>\n          ) : (\n            <span>\n              {i18n('Load files')}\n              <input {...getInputProps()} />\n            </span>\n          )}\n        </span>\n      )}\n    </Dropzone>\n  );\n};\n\nconst linksDialogMessage = (onDrop, i18n) => {\n  return (\n    <>\n      {i18n('Or click to ')}\n      {dropZoneLinkDialog(onDrop, i18n)}\n      {i18n(' or ')}\n      {dropZoneLinkDialog(onDrop, i18n, true)}\n      {i18n(' from dialog')}\n    </>\n  );\n};\n\nclass ViewerLocalFileData extends Component {\n  static propTypes = {\n    studies: PropTypes.array,\n  };\n\n  state = {\n    studies: null,\n    loading: false,\n    error: null,\n  };\n\n  updateStudies = studies => {\n    // Render the viewer when the data is ready\n    studyMetadataManager.purge();\n\n    // Map studies to new format, update metadata manager?\n    const updatedStudies = studies.map(study => {\n      const studyMetadata = new OHIFStudyMetadata(\n        study,\n        study.StudyInstanceUID\n      );\n      const sopClassHandlerModules =\n        extensionManager.modules['sopClassHandlerModule'];\n\n      study.displaySets =\n        study.displaySets ||\n        studyMetadata.createDisplaySets(sopClassHandlerModules);\n\n      studyMetadata.forEachDisplaySet(displayset => {\n        displayset.localFile = true;\n      });\n\n      studyMetadataManager.add(studyMetadata);\n\n      return study;\n    });\n\n    this.setState({\n      studies: updatedStudies,\n    });\n  };\n\n  render() {\n    const onDrop = async acceptedFiles => {\n      this.setState({ loading: true });\n\n      const studies = await filesToStudies(acceptedFiles);\n      const updatedStudies = this.updateStudies(studies);\n\n      if (!updatedStudies) {\n        return;\n      }\n\n      this.setState({ studies: updatedStudies, loading: false });\n    };\n\n    if (this.state.error) {\n      return <div>Error: {JSON.stringify(this.state.error)}</div>;\n    }\n\n    return (\n      <Dropzone onDrop={onDrop} noClick>\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps()} style={{ width: '100%', height: '100%' }}>\n            {this.state.studies ? (\n              <ConnectedViewer\n                studies={this.state.studies}\n                studyInstanceUIDs={\n                  this.state.studies &&\n                  this.state.studies.map(a => a.StudyInstanceUID)\n                }\n              />\n            ) : (\n              <div className={'drag-drop-instructions'}>\n                <div className={'drag-drop-contents'}>\n                  {this.state.loading ? (\n                    <h3>{this.props.t('Loading...')}</h3>\n                  ) : (\n                    <>\n                      <h3>\n                        {this.props.t(\n                          'Drag and Drop DICOM files here to load them in the Viewer'\n                        )}\n                      </h3>\n                      <h4>{linksDialogMessage(onDrop, this.props.t)}</h4>\n                    </>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Dropzone>\n    );\n  }\n}\n\nexport default withTranslation('Common')(ViewerLocalFileData);\n","export default class FileLoader {\n  fileType;\n  loadFile(file, imageId) { }\n  getDataset(image, imageId) { }\n  getStudies(dataset, imageId) { }\n}\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\n\nconst PDFFileLoader = new (class extends FileLoader {\n  fileType = 'application/pdf';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    const dataset = {};\n    dataset.imageId = image.imageId || imageId;\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getDefaultStudy(imageId);\n  }\n\n  getDefaultStudy(imageId) {\n    const study = {\n      StudyInstanceUID: '',\n      StudyDate: '',\n      StudyTime: '',\n      AccessionNumber: '',\n      ReferringPhysicianName: '',\n      PatientName: '',\n      PatientID: '',\n      PatientBirthdate: '',\n      PatientSex: '',\n      StudyId: '',\n      StudyDescription: '',\n      series: [\n        {\n          SeriesInstanceUID: '',\n          SeriesDescription: '',\n          SeriesNumber: '',\n          instances: [\n            {\n              metadata: {\n                SOPInstanceUID: '',\n                SOPClassUID: '1.2.840.10008.5.1.4.1.1.104.1',\n                Rows: '',\n                Columns: '',\n                NumberOfFrames: 0,\n                InstanceNumber: 1,\n              },\n              getImageId: () => imageId,\n              isLocalFile: true,\n            },\n          ],\n        },\n      ],\n    };\n\n    return study;\n  }\n})();\n\nexport default PDFFileLoader;\n","import dcmjs from 'dcmjs';\nimport cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport OHIF from '@ohif/core';\n\nconst metadataProvider = OHIF.cornerstone.metadataProvider;\n\nconst DICOMFileLoader = new (class extends FileLoader {\n  fileType = 'application/dicom';\n  loadFile(file, imageId) {\n    return cornerstoneWADOImageLoader.wadouri.loadFileRequest(imageId);\n  }\n\n  getDataset(image, imageId) {\n    let dataset = {};\n    try {\n      const dicomData = dcmjs.data.DicomMessage.readFile(image);\n\n      dataset = dcmjs.data.DicomMetaDictionary.naturalizeDataset(\n        dicomData.dict\n      );\n\n      metadataProvider.addInstance(dataset);\n\n      dataset._meta = dcmjs.data.DicomMetaDictionary.namifyDataset(\n        dicomData.meta\n      );\n    } catch (e) {\n      console.error('Error reading dicom file', e);\n    }\n    // Set imageId on dataset to be consumed later on\n    dataset.imageId = imageId;\n\n    return dataset;\n  }\n\n  getStudies(dataset, imageId) {\n    return this.getStudyFromDataset(dataset);\n  }\n\n  getStudyFromDataset(dataset = {}) {\n    const {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      SeriesInstanceUID,\n      SeriesDescription,\n      SeriesNumber,\n      imageId,\n    } = dataset;\n\n    const instance = {\n      metadata: dataset,\n      url: imageId,\n    };\n\n    const series = {\n      SeriesInstanceUID: SeriesInstanceUID,\n      SeriesDescription: SeriesDescription,\n      SeriesNumber: SeriesNumber,\n      instances: [instance],\n    };\n\n    const study = {\n      StudyInstanceUID,\n      StudyDate,\n      StudyTime,\n      AccessionNumber,\n      ReferringPhysicianName,\n      PatientName,\n      PatientID,\n      PatientBirthDate,\n      PatientSex,\n      StudyID,\n      StudyDescription,\n      /*\n      TODO: in case necessary to uncomment this block, double check every property\n      numberOfStudyRelatedSeries: NumberOfStudyRelatedSeries || DICOMWeb.getString(dataset['00201206']),\n      numberOfStudyRelatedInstances: NumberOfStudyRelatedInstances || DICOMWeb.getString(dataset['00201208']),\n      Modality: Modality || DICOMWeb.getString(dataset['00080060']),\n      ModalitiesInStudy: ModalitiesInStudy || DICOMWeb.getString(dataset['00080061']),\n      modalities:\n      */\n      series: [series],\n    };\n\n    return study;\n  }\n})();\n\nexport default DICOMFileLoader;\n","import cornerstoneWADOImageLoader from 'cornerstone-wado-image-loader';\nimport FileLoader from './fileLoader';\nimport PDFFileLoader from './pdfFileLoader';\nimport DICOMFileLoader from './dicomFileLoader';\n\nclass FileLoaderService extends FileLoader {\n  fileType;\n  loader;\n  constructor(file) {\n    super();\n    const fileType = file && file.type;\n    this.loader = this.getLoader(fileType);\n    this.fileType = this.loader.fileType;\n  }\n\n  static groupSeries(studies) {\n    const groupBy = (list, groupByKey, listKey) => {\n      let nonKeyCounter = 1;\n\n      return list.reduce((acc, obj) => {\n        let key = obj[groupByKey];\n        const list = obj[listKey];\n\n        // in case key not found, group it using counter\n        key = !!key ? key : '' + nonKeyCounter++;\n\n        if (!acc[key]) {\n          acc[key] = { ...obj };\n          acc[key][listKey] = [];\n        }\n\n        acc[key][listKey].push(...list);\n\n        return acc;\n      }, {});\n    };\n\n    const studiesGrouped = Object.values(\n      groupBy(studies, 'StudyInstanceUID', 'series')\n    );\n\n    const result = studiesGrouped.map(studyGroup => {\n      const seriesGrouped = groupBy(\n        studyGroup.series,\n        'SeriesInstanceUID',\n        'instances'\n      );\n      studyGroup.series = Object.values(seriesGrouped);\n\n      return studyGroup;\n    });\n\n    return result;\n  }\n\n  addFile(file) {\n    return cornerstoneWADOImageLoader.wadouri.fileManager.add(file);\n  }\n\n  loadFile(file, imageId) {\n    return this.loader.loadFile(file, imageId);\n  }\n\n  getDataset(image, imageId) {\n    return this.loader.getDataset(image, imageId);\n  }\n\n  getStudies(dataset, imageId) {\n    return this.loader.getStudies(dataset, imageId);\n  }\n\n  getLoader(fileType) {\n    if (fileType === 'application/pdf') {\n      return PDFFileLoader;\n    } else {\n      // Default to dicom loader\n      return DICOMFileLoader;\n    }\n  }\n}\n\nexport default FileLoaderService;\n","import FileLoaderService from './localFileLoaders/fileLoaderService';\n\nconst processFile = async file => {\n  try {\n    const fileLoaderService = new FileLoaderService(file);\n    const imageId = fileLoaderService.addFile(file);\n    const image = await fileLoaderService.loadFile(file, imageId);\n    const dataset = await fileLoaderService.getDataset(image, imageId);\n    const studies = await fileLoaderService.getStudies(dataset, imageId);\n\n    return studies;\n  } catch (error) {\n    console.log(\n      error.name,\n      ':Error when trying to load and process local files:',\n      error.message\n    );\n  }\n};\n\nexport default async function filesToStudies(files) {\n  const processFilesPromises = files.map(processFile);\n  const studies = await Promise.all(processFilesPromises);\n\n  return FileLoaderService.groupSeries(studies.flat());\n}\n"],"sourceRoot":""}