{"version":3,"sources":["webpack:///./connectedComponents/ConnectedCineDialog.js","webpack:///./connectedComponents/ConnectedLayoutButton.js","webpack:///./connectedComponents/ToolbarRow.js","webpack:///./connectedComponents/ConnectedStudyBrowser.js","webpack:///./connectedComponents/findDisplaySetByUID.js","webpack:///./components/ViewportGrid/ViewportPane.js","webpack:///./components/ViewportGrid/ViewportGrid.js","webpack:///./components/ViewportGrid/DefaultViewport.js","webpack:///./components/ViewportGrid/ConnectedViewportGrid.js","webpack:///./connectedComponents/ViewerMain.js","webpack:///./connectedComponents/ConnectedViewerMain.js","webpack:///./components/SidePanel.js","webpack:///./components/ErrorBoundaryDialog/ErrorBoundaryDialog.js","webpack:///./components/ErrorBoundaryDialog/index.js","webpack:///./components/StudyPrefetcher.js","webpack:///./components/StudyLoadingMonitor.js","webpack:///./connectedComponents/Viewer.js","webpack:///./connectedComponents/ConnectedViewer.js"],"names":["scrollToIndex","toolImport","csTools","import","setViewportSpecificData","OHIF","redux","actions","ConnectedCineDialog","connect","state","viewports","cine","viewportSpecificData","activeViewportIndex","activeEnabledElement","commandsManager","runCommand","activeViewportCineData","isPlaying","cineFrameRate","dispatch","dispatchSetViewportSpecificData","viewportIndex","data","propsFromState","propsFromDispatch","ownProps","onPlayPauseChanged","cloneDeep","onFrameRateChanged","frameRate","onClickNextButton","stackData","getToolState","length","currentImageIdIndex","imageIds","onClickBackButton","onClickSkipToStart","onClickSkipToEnd","lastIndex","CineDialog","setLayout","setViewportActive","ConnectedLayoutButton","currentLayout","layout","onChange","selectedCell","numRows","row","numColumns","col","numViewports","i","viewport","plugin","vtk","push","onChangeFromDispatch","LayoutButton","ToolbarRow","props","dialog","dialogId","activeButtons","toolbarButtons","find","button","options","behavior","dismiss","id","filter","setState","toolbarButtonDefinitions","_getVisibleToolbarButtons","call","seriesPerStudyCount","_handleBuiltIn","bind","_onDerivedDisplaySetsLoadedAndCached","updateButtonGroups","panelModules","extensionManager","modules","MODULE_TYPES","PANEL","this","buttonGroups","left","right","forEach","panelExtension","panelModule","module","defaultContexts","Array","from","defaultContext","menuOptions","menuOption","contexts","context","hasActiveContext","activeContexts","some","actx","includes","isDisabled","studies","activeViewport","menuOptionEntry","value","target","icon","bottomLabel","label","badgeNumber","stateEvent","unshift","t","document","addEventListener","removeEventListener","prevProps","activeContextsChanged","prevStudies","prevActiveViewport","shouldUpdate","series","closeCineDialogIfNotApplicable","buttonComponents","_getButtonComponents","onPress","side","handleSidePanelChange","onPressLeft","onPressRight","className","style","padding","selectedLeftSidePanel","onValueChanged","marginLeft","selectedRightSidePanel","Component","_getCustomButtonComponent","CustomComponent","activeButtonsIds","map","isActive","parentContext","toolbarClickCallback","_handleToolbarButtonClick","key","_getExpandableButtonComponent","activeCommand","childButtons","buttons","childButton","onClick","indexOf","_getDefaultButtonComponent","_this","hasCustomComponent","hasNestedButtonDefinitions","evt","commandName","Object","assign","commandOptions","type","toggables","togglable","toolbarModules","TOOLBAR","extension","definitions","definition","querySelector","getBoundingClientRect","x","y","newDialogId","create","content","defaultPosition","title","isLeftSidePanelOpen","PropTypes","bool","isRequired","isRightSidePanelOpen","string","func","arrayOf","array","any","modal","withTranslation","withModal","withDialog","withAppContext","setActiveViewportSpecificData","ConnectedStudyBrowser","onThumbnailClick","displaySetInstanceUID","displaySet","studyMetadata","isArray","reduce","all","current","currentDisplaySet","displaySets","concat","ds","findDisplaySetByUID","servicesManager","services","LoggerService","UINotificationService","isDerived","Modality","getSourceDisplaySet","error","message","show","autoClose","referencedDisplaySet","activatedLabelmapPromise","then","activatedLabelmapIndex","selectionFired","CustomEvent","detail","dispatchEvent","Error","isSOPClassUIDSupported","StudyBrowser","ViewportPane","children","onDrop","propClassName","useDrop","accept","drop","droppedItem","monitor","canDrop","isOver","StudyInstanceUID","collect","highlighted","hovered","classNames","ref","data-cy","propTypes","node","number","loadAndCacheDerivedDisplaySets","utils","ViewportGrid","availablePlugins","defaultPluginName","defaultPlugin","setViewportData","viewportData","isStudyLoaded","rowSize","colSize","snackbar","useSnackbarContext","logger","useLogger","useEffect","ViewportPanes","React","useMemo","pluginName","ViewportComponent","JSON","stringify","_getViewportComponent","active","display","gridTemplateRows","gridTemplateColumns","height","width","supportsDrop","object","defaultProps","DefaultViewport","getAvailableViewportModules","memoize","viewportModules","availableViewportModules","moduleDefinition","extensionId","ConnectedViewportGrid","VIEWPORT","values","_values","ViewerMain","dirtyViewportPanes","viewportPane","foundDisplaySet","v","vp","findDisplaySet","study","dSet","getDisplaySets","fillEmptyViewportPanes","prevViewportAmount","viewportAmount","isVtk","keys","clearViewportSpecificData","ConnectedViewerMain","SidePanel","isOpen","fromSideClass","styles","maxWidth","marginRight","Number","parseInt","UIModalService","ErrorBoundaryDialog","fallbackComponent","role","onError","componentStack","useState","open","setOpen","s","name","classnames","opened","StudyPrefetcher","studyPrefetcher","classes","getInstance","studiesMetadata","studyMetadataManager","get","setStudies","onNewImage","addDisplaySet","getStudy","image","getSeries","instance","getDisplaySetBySOPInstanceUID","prefetch","element","onElementEnabled","cs","EVENTS","NEW_IMAGE","events","ELEMENT_ENABLED","destroy","shape","enabled","order","displaySetCount","preventCache","prefetchDisplaySetsTimeout","includeActiveDisplaySet","StudyLoadingListener","StudyLoadingMonitor","studyLoadingListener","clear","addStudies","Viewer","thumbnails","log","info","earliestDate","Date","toISOString","latestDate","StudyDate","moment","Promise","resolve","timepointType","timepointId","studyInstanceUIDs","PatientID","isLocked","timepointData","query","timepointIds","timepoints","onTimepointsUpdated","measurements","onMeasurementsUpdated","activeServer","server","external","MeasurementApi","setConfiguration","dataExchange","retrieve","DICOMSR","retrieveMeasurements","store","storeMeasurements","TimepointApi","retrieveTimepoints","storeTimepoints","remove","removeTimepoint","update","updateTimepoint","disassociate","disassociateStudy","_getActiveViewport","dismissAll","_updateThumbnails","timepointApi","measurementApi","currentTimepointId","activeDisplaySetInstanceUID","undefined","_mapStudiesToThumbnails","prevActiveDisplaySetInstanceUID","VisiblePanelLeft","VisiblePanelRight","panelExt","components","comp","component","WhiteLabelingContext","Consumer","whiteLabeling","UserManagerContext","userManager","AppContext","appContext","ConnectedHeader","linkText","appConfig","showStudyList","linkPath","createLogoComponentFn","selectedPanel","sideClicked","toUpperCase","slice","openKey","selectedKey","updatedState","prevSelectedPanel","isSameSelectedPanel","activeIndex","showThumbnailProgressBar","displayProgress","getActiveViewport","SeriesDescription","SeriesNumber","InstanceNumber","numImageFrames","images","getImageId","wadoRoot","_checkForDerivedDisplaySets","derivedDisplaySetsNumber","derivedDisplaySets","getDerivedDatasets","referencedSeriesInstanceUID","SeriesInstanceUID","_checkForSeriesInconsistencesWarnings","inconsistencyWarnings","reconstructionIssues","warning","ReconstructionIssues","DATASET_4D","VARYING_IMAGESDIMENSIONS","VARYING_IMAGESCOMPONENTS","VARYING_IMAGESORIENTATION","IRREGULAR_SPACING","MULTIFFRAMES","missingFrames","warn","loadError","segLoadErrorMessagge","_isDisplaySetActive","imageId","altImageText","imageIndex","Math","floor","SOPClassUIDNaturalized","hasWarnings","hasDerivedDisplaySets","setTimepoints","setMeasurements","getActiveServer","servers","a","ConnectedViewer"],"mappings":"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","file":"ConnectedStandaloneRouting~IHEInvokeImageDisplay~ViewerLocalFileData~ViewerRouting.bundle.ba5e446ac482d66de0ac.js","sourcesContent":["import { connect } from 'react-redux';\nimport { CineDialog } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport csTools from 'cornerstone-tools';\nimport { commandsManager } from './../App.js';\n// Our target output kills the `as` and \"import\" throws a keyword error\n// import { import as toolImport, getToolState } from 'cornerstone-tools';\nimport cloneDeep from 'lodash.clonedeep';\n\nconst toolImport = csTools.import;\nconst scrollToIndex = toolImport('util/scrollToIndex');\nconst { setViewportSpecificData } = OHIF.redux.actions;\n\n// Why do I need or care about any of this info?\n// A dispatch action should be able to pull this at the time of an event?\n// `isPlaying` and `cineFrameRate` might matter, but I think we can prop pass for those.\nconst mapStateToProps = state => {\n  // Get activeViewport's `cine` and `stack`\n  const { viewportSpecificData, activeViewportIndex } = state.viewports;\n  const { cine } = viewportSpecificData[activeViewportIndex] || {};\n  const dom = commandsManager.runCommand('getActiveViewportEnabledElement');\n\n  const cineData = cine || {\n    isPlaying: false,\n    cineFrameRate: 24,\n  };\n\n  // New props we're creating?\n  return {\n    activeEnabledElement: dom,\n    activeViewportCineData: cineData,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatchSetViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  const {\n    activeEnabledElement,\n    activeViewportCineData,\n    activeViewportIndex,\n  } = propsFromState;\n\n  return {\n    cineFrameRate: activeViewportCineData.cineFrameRate,\n    isPlaying: activeViewportCineData.isPlaying,\n    onPlayPauseChanged: isPlaying => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.isPlaying = !cine.isPlaying;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onFrameRateChanged: frameRate => {\n      const cine = cloneDeep(activeViewportCineData);\n      cine.cineFrameRate = frameRate;\n\n      propsFromDispatch.dispatchSetViewportSpecificData(activeViewportIndex, {\n        cine,\n      });\n    },\n    onClickNextButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex, imageIds } = stackData.data[0];\n      if (currentImageIdIndex >= imageIds.length - 1) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex + 1);\n    },\n    onClickBackButton: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const { currentImageIdIndex } = stackData.data[0];\n      if (currentImageIdIndex === 0) return;\n      scrollToIndex(activeEnabledElement, currentImageIdIndex - 1);\n    },\n    onClickSkipToStart: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      scrollToIndex(activeEnabledElement, 0);\n    },\n    onClickSkipToEnd: () => {\n      const stackData = csTools.getToolState(activeEnabledElement, 'stack');\n      if (!stackData || !stackData.data || !stackData.data.length) return;\n      const lastIndex = stackData.data[0].imageIds.length - 1;\n      scrollToIndex(activeEnabledElement, lastIndex);\n    },\n  };\n};\n\nconst ConnectedCineDialog = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(CineDialog);\n\nexport default ConnectedCineDialog;\n","import { LayoutButton } from '@ohif/ui';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\n\nconst { setLayout, setViewportActive } = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  return {\n    currentLayout: state.viewports.layout,\n    activeViewportIndex: state.viewports.activeViewportIndex,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // TODO: Change if layout switched becomes more complex\n    onChange: (selectedCell, currentLayout, activeViewportIndex) => {\n      const viewports = [];\n      const numRows = selectedCell.row + 1;\n      const numColumns = selectedCell.col + 1;\n      const numViewports = numRows * numColumns;\n\n      for (let i = 0; i < numViewports; i++) {\n        // Hacky way to allow users to exit MPR \"mode\"\n        const viewport = currentLayout.viewports[i];\n        let plugin = viewport && viewport.plugin;\n        if (viewport && viewport.vtk) {\n          plugin = 'cornerstone';\n        }\n\n        viewports.push({\n          plugin,\n        });\n      }\n      const layout = {\n        numRows,\n        numColumns,\n        viewports,\n      };\n\n      const maxActiveIndex = numViewports - 1;\n      if (activeViewportIndex > maxActiveIndex) {\n        dispatch(setViewportActive(0));\n      }\n\n      dispatch(setLayout(layout));\n    },\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch) => {\n  const onChangeFromDispatch = propsFromDispatch.onChange;\n  const { currentLayout, activeViewportIndex } = propsFromState;\n\n  return {\n    onChange: selectedCell =>\n      onChangeFromDispatch(selectedCell, currentLayout, activeViewportIndex),\n  };\n};\n\nconst ConnectedLayoutButton = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n  mergeProps\n)(LayoutButton);\n\nexport default ConnectedLayoutButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\n\nimport { MODULE_TYPES } from '@ohif/core';\nimport {\n  ExpandableToolMenu,\n  RoundedButtonGroup,\n  ToolbarButton,\n  withModal,\n  withDialog,\n} from '@ohif/ui';\n\nimport './ToolbarRow.css';\nimport { commandsManager, extensionManager } from './../App.js';\n\nimport ConnectedCineDialog from './ConnectedCineDialog';\nimport ConnectedLayoutButton from './ConnectedLayoutButton';\nimport { withAppContext } from '../context/AppContext';\n\nclass ToolbarRow extends Component {\n  // TODO: Simplify these? isOpen can be computed if we say \"any\" value for selected,\n  // closed if selected is null/undefined\n  static propTypes = {\n    isLeftSidePanelOpen: PropTypes.bool.isRequired,\n    isRightSidePanelOpen: PropTypes.bool.isRequired,\n    selectedLeftSidePanel: PropTypes.string.isRequired,\n    selectedRightSidePanel: PropTypes.string.isRequired,\n    handleSidePanelChange: PropTypes.func.isRequired,\n    activeContexts: PropTypes.arrayOf(PropTypes.string).isRequired,\n    studies: PropTypes.array,\n    t: PropTypes.func.isRequired,\n    // NOTE: withDialog, withModal HOCs\n    dialog: PropTypes.any,\n    modal: PropTypes.any,\n  };\n\n  static defaultProps = {\n    studies: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    const toolbarButtonDefinitions = _getVisibleToolbarButtons.call(this);\n    // TODO:\n    // If it's a tool that can be active... Mark it as active?\n    // - Tools that are on/off?\n    // - Tools that can be bound to multiple buttons?\n\n    // Normal ToolbarButtons...\n    // Just how high do we need to hoist this state?\n    // Why ToolbarRow instead of just Toolbar? Do we have any others?\n    this.state = {\n      toolbarButtons: toolbarButtonDefinitions,\n      activeButtons: [],\n    };\n\n    this.seriesPerStudyCount = [];\n\n    this._handleBuiltIn = _handleBuiltIn.bind(this);\n    this._onDerivedDisplaySetsLoadedAndCached = this._onDerivedDisplaySetsLoadedAndCached.bind(\n      this\n    );\n\n    this.updateButtonGroups();\n  }\n\n  updateButtonGroups() {\n    const panelModules = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    this.buttonGroups = {\n      left: [],\n      right: [],\n    };\n\n    // ~ FIND MENU OPTIONS\n    panelModules.forEach(panelExtension => {\n      const panelModule = panelExtension.module;\n      const defaultContexts = Array.from(panelModule.defaultContext);\n\n      panelModule.menuOptions.forEach(menuOption => {\n        const contexts = Array.from(menuOption.context || defaultContexts);\n        const hasActiveContext = this.props.activeContexts.some(actx =>\n          contexts.includes(actx)\n        );\n\n        // It's a bit beefy to pass studies; probably only need to be reactive on `studyInstanceUIDs` and activeViewport?\n        // Note: This does not cleanly handle `studies` prop updating with panel open\n        const isDisabled =\n          typeof menuOption.isDisabled === 'function' &&\n          menuOption.isDisabled(this.props.studies, this.props.activeViewport);\n\n        if (hasActiveContext && !isDisabled) {\n          const menuOptionEntry = {\n            value: menuOption.target,\n            icon: menuOption.icon,\n            bottomLabel: menuOption.label,\n            badgeNumber: menuOption.badgeNumber,\n            stateEvent: menuOption.stateEvent,\n          };\n          const from = menuOption.from || 'right';\n\n          this.buttonGroups[from].push(menuOptionEntry);\n        }\n      });\n    });\n\n    // TODO: This should come from extensions, instead of being baked in\n    this.buttonGroups.left.unshift({\n      value: 'studies',\n      icon: 'th-large',\n      bottomLabel: this.props.t('Series'),\n    });\n  }\n\n  componentDidMount() {\n    /*\n     * TODO: Improve the way we notify parts of the app\n     * that depends on derived display sets to be loaded.\n     * (Implement pubsub for better tracking of derived display sets)\n     */\n    document.addEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\n      'deriveddisplaysetsloadedandcached',\n      this._onDerivedDisplaySetsLoadedAndCached\n    );\n  }\n\n  _onDerivedDisplaySetsLoadedAndCached() {\n    this.updateButtonGroups();\n    this.setState({\n      toolbarButtons: _getVisibleToolbarButtons.call(this),\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const activeContextsChanged =\n      prevProps.activeContexts !== this.props.activeContexts;\n\n    const prevStudies = prevProps.studies;\n    const prevActiveViewport = prevProps.activeViewport;\n    const activeViewport = this.props.activeViewport;\n    const studies = this.props.studies;\n    const seriesPerStudyCount = this.seriesPerStudyCount;\n\n    let shouldUpdate = false;\n\n    if (\n      prevStudies.length !== studies.length ||\n      prevActiveViewport !== activeViewport\n    ) {\n      shouldUpdate = true;\n    } else {\n      for (let i = 0; i < studies.length; i++) {\n        if (studies[i].series.length !== seriesPerStudyCount[i]) {\n          seriesPerStudyCount[i] = studies[i].series.length;\n\n          shouldUpdate = true;\n          break;\n        }\n      }\n    }\n\n    if (shouldUpdate) {\n      this.updateButtonGroups();\n    }\n\n    if (activeContextsChanged) {\n      this.setState(\n        {\n          toolbarButtons: _getVisibleToolbarButtons.call(this),\n        },\n        this.closeCineDialogIfNotApplicable\n      );\n    }\n  }\n\n  closeCineDialogIfNotApplicable = () => {\n    const { dialog } = this.props;\n    let { dialogId, activeButtons, toolbarButtons } = this.state;\n    if (dialogId) {\n      const cineButtonPresent = toolbarButtons.find(\n        button => button.options && button.options.behavior === 'CINE'\n      );\n      if (!cineButtonPresent) {\n        dialog.dismiss({ id: dialogId });\n        activeButtons = activeButtons.filter(\n          button => button.options && button.options.behavior !== 'CINE'\n        );\n        this.setState({ dialogId: null, activeButtons });\n      }\n    }\n  };\n\n  render() {\n    const buttonComponents = _getButtonComponents.call(\n      this,\n      this.state.toolbarButtons,\n      this.state.activeButtons\n    );\n\n    const onPress = (side, value) => {\n      this.props.handleSidePanelChange(side, value);\n    };\n    const onPressLeft = onPress.bind(this, 'left');\n    const onPressRight = onPress.bind(this, 'right');\n\n    return (\n      <>\n        <div className=\"ToolbarRow\">\n          <div className=\"pull-left m-t-1 p-y-1\" style={{ padding: '10px' }}>\n            <RoundedButtonGroup\n              options={this.buttonGroups.left}\n              value={this.props.selectedLeftSidePanel || ''}\n              onValueChanged={onPressLeft}\n            />\n          </div>\n          {buttonComponents}\n          <ConnectedLayoutButton />\n          <div\n            className=\"pull-right m-t-1 rm-x-1\"\n            style={{ marginLeft: 'auto' }}\n          >\n            {this.buttonGroups.right.length && (\n              <RoundedButtonGroup\n                options={this.buttonGroups.right}\n                value={this.props.selectedRightSidePanel || ''}\n                onValueChanged={onPressRight}\n              />\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nfunction _getCustomButtonComponent(button, activeButtons) {\n  const CustomComponent = button.CustomComponent;\n  const isValidComponent = typeof CustomComponent === 'function';\n\n  // Check if its a valid customComponent. Later on an CustomToolbarComponent interface could be implemented.\n  if (isValidComponent) {\n    const parentContext = this;\n    const activeButtonsIds = activeButtons.map(button => button.id);\n    const isActive = activeButtonsIds.includes(button.id);\n\n    return (\n      <CustomComponent\n        parentContext={parentContext}\n        toolbarClickCallback={_handleToolbarButtonClick.bind(this)}\n        button={button}\n        key={button.id}\n        activeButtons={activeButtonsIds}\n        isActive={isActive}\n      />\n    );\n  }\n}\n\nfunction _getExpandableButtonComponent(button, activeButtons) {\n  // Iterate over button definitions and update `onClick` behavior\n  let activeCommand;\n  const childButtons = button.buttons.map(childButton => {\n    childButton.onClick = _handleToolbarButtonClick.bind(this, childButton);\n\n    if (activeButtons.map(button => button.id).indexOf(childButton.id) > -1) {\n      activeCommand = childButton.id;\n    }\n\n    return childButton;\n  });\n\n  return (\n    <ExpandableToolMenu\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      buttons={childButtons}\n      activeCommand={activeCommand}\n    />\n  );\n}\n\nfunction _getDefaultButtonComponent(button, activeButtons) {\n  return (\n    <ToolbarButton\n      key={button.id}\n      label={button.label}\n      icon={button.icon}\n      onClick={_handleToolbarButtonClick.bind(this, button)}\n      isActive={activeButtons.map(button => button.id).includes(button.id)}\n    />\n  );\n}\n/**\n * Determine which extension buttons should be showing, if they're\n * active, and what their onClick behavior should be.\n */\nfunction _getButtonComponents(toolbarButtons, activeButtons) {\n  const _this = this;\n  return toolbarButtons.map(button => {\n    const hasCustomComponent = button.CustomComponent;\n    const hasNestedButtonDefinitions = button.buttons && button.buttons.length;\n\n    if (hasCustomComponent) {\n      return _getCustomButtonComponent.call(_this, button, activeButtons);\n    }\n\n    if (hasNestedButtonDefinitions) {\n      return _getExpandableButtonComponent.call(_this, button, activeButtons);\n    }\n\n    return _getDefaultButtonComponent.call(_this, button, activeButtons);\n  });\n}\n\n/**\n * TODO: DEPRECATE\n * This is used exclusively in `extensions/cornerstone/src`\n * We have better ways with new UI Services to trigger \"builtin\" behaviors\n *\n * A handy way for us to handle different button types. IE. firing commands for\n * buttons, or initiation built in behavior.\n *\n * @param {*} button\n * @param {*} evt\n * @param {*} props\n */\nfunction _handleToolbarButtonClick(button, evt, props) {\n  const { activeButtons } = this.state;\n\n  if (button.commandName) {\n    const options = Object.assign({ evt }, button.commandOptions);\n    commandsManager.runCommand(button.commandName, options);\n  }\n\n  // TODO: Use Types ENUM\n  // TODO: We can update this to be a `getter` on the extension to query\n  //       For the active tools after we apply our updates?\n  if (button.type === 'setToolActive') {\n    const toggables = activeButtons.filter(\n      ({ options }) => options && !options.togglable\n    );\n    this.setState({ activeButtons: [...toggables, button] });\n  } else if (button.type === 'builtIn') {\n    this._handleBuiltIn(button);\n  }\n}\n\n/**\n *\n */\nfunction _getVisibleToolbarButtons() {\n  const toolbarModules = extensionManager.modules[MODULE_TYPES.TOOLBAR];\n  const toolbarButtonDefinitions = [];\n\n  toolbarModules.forEach(extension => {\n    const { definitions, defaultContext } = extension.module;\n    definitions.forEach(definition => {\n      const context = definition.context || defaultContext;\n\n      if (this.props.activeContexts.includes(context)) {\n        toolbarButtonDefinitions.push(definition);\n      }\n    });\n  });\n\n  return toolbarButtonDefinitions;\n}\n\nfunction _handleBuiltIn(button) {\n  /* TODO: Keep cine button active until its unselected. */\n  const { dialog, t } = this.props;\n  const { dialogId } = this.state;\n  const { id, options } = button;\n\n  if (options.behavior === 'CINE') {\n    if (dialogId) {\n      dialog.dismiss({ id: dialogId });\n      this.setState(state => ({\n        dialogId: null,\n        activeButtons: [\n          ...state.activeButtons.filter(button => button.id !== id),\n        ],\n      }));\n    } else {\n      const spacing = 20;\n      const { x, y } = document\n        .querySelector(`.ViewerMain`)\n        .getBoundingClientRect();\n      const newDialogId = dialog.create({\n        content: ConnectedCineDialog,\n        defaultPosition: {\n          x: x + spacing || 0,\n          y: y + spacing || 0,\n        },\n      });\n      this.setState(state => ({\n        dialogId: newDialogId,\n        activeButtons: [...state.activeButtons, button],\n      }));\n    }\n  }\n\n  if (options.behavior === 'DOWNLOAD_SCREEN_SHOT') {\n    commandsManager.runCommand('showDownloadViewportModal', {\n      title: t('Download High Quality Image'),\n    });\n  }\n}\n\nexport default withTranslation(['Common', 'ViewportDownloadForm'])(\n  withModal(withDialog(withAppContext(ToolbarRow)))\n);\n","import OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport findDisplaySetByUID from './findDisplaySetByUID';\nimport { servicesManager } from './../App.js';\nimport { StudyBrowser } from '../../../ui/src/components/studyBrowser/StudyBrowser';\n\nconst { setActiveViewportSpecificData } = OHIF.redux.actions;\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onThumbnailClick: displaySetInstanceUID => {\n      let displaySet = findDisplaySetByUID(\n        ownProps.studyMetadata,\n        displaySetInstanceUID\n      );\n\n      const { LoggerService, UINotificationService } = servicesManager.services;\n\n      if (displaySet.isDerived) {\n        const { Modality } = displaySet;\n        if (Modality === 'SEG' && servicesManager) {\n          const onDisplaySetLoadFailureHandler = error => {\n            LoggerService.error({ error, message: error.message });\n            UINotificationService.show({\n              title: 'DICOM Segmentation Loader',\n              message: error.message,\n              type: 'error',\n              autoClose: true,\n            });\n          };\n\n          const {\n            referencedDisplaySet,\n            activatedLabelmapPromise,\n          } = displaySet.getSourceDisplaySet(\n            ownProps.studyMetadata,\n            true,\n            onDisplaySetLoadFailureHandler\n          );\n          displaySet = referencedDisplaySet;\n\n          activatedLabelmapPromise.then(activatedLabelmapIndex => {\n            const selectionFired = new CustomEvent(\n              'extensiondicomsegmentationsegselected',\n              {\n                detail: { activatedLabelmapIndex: activatedLabelmapIndex },\n              }\n            );\n            document.dispatchEvent(selectionFired);\n          });\n        } else if (Modality !== 'SR') {\n          displaySet = displaySet.getSourceDisplaySet(ownProps.studyMetadata);\n        }\n\n        if (!displaySet) {\n          const error = new Error(\n            `Referenced series for ${Modality} dataset not present.`\n          );\n          const message = `Referenced series for ${Modality} dataset not present.`;\n          LoggerService.error({ error, message });\n          UINotificationService.show({\n            autoClose: false,\n            title: 'Fail to load series',\n            message,\n            type: 'error',\n          });\n        }\n      }\n\n      if (!displaySet) {\n        const error = new Error('Source data not present');\n        const message = 'Source data not present';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n\n      if (displaySet.isSOPClassUIDSupported === false) {\n        const error = new Error('Modality not supported');\n        const message = 'Modality not supported';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n\n      dispatch(setActiveViewportSpecificData(displaySet));\n    },\n  };\n};\n\nconst ConnectedStudyBrowser = connect(\n  null,\n  mapDispatchToProps\n)(StudyBrowser);\n\nexport default ConnectedStudyBrowser;\n","/**\n * Finds displaySet by UID across all displaySets inside studyMetadata\n * @param {Array} studyMetadata\n * @param {string} displaySetInstanceUID\n */\nexport default function findDisplaySetByUID(\n  studyMetadata,\n  displaySetInstanceUID\n) {\n  if (!Array.isArray(studyMetadata)) return null;\n\n  const allDisplaySets = studyMetadata.reduce((all, current) => {\n    let currentDisplaySet = [];\n    if (current && Array.isArray(current.displaySets)) {\n      currentDisplaySet = current.displaySets;\n    }\n    return all.concat(currentDisplaySet);\n  }, []);\n\n  const bySetInstanceUID = ds =>\n    ds.displaySetInstanceUID === displaySetInstanceUID;\n\n  const displaySet = allDisplaySets.find(bySetInstanceUID);\n  return displaySet || null;\n}\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './ViewportPane.css';\n\nconst ViewportPane = function (props) {\n  const { children, onDrop, viewportIndex, className: propClassName } = props;\n  const [{ hovered, highlighted }, drop] = useDrop({\n    accept: 'thumbnail',\n    drop: (droppedItem, monitor) => {\n      const canDrop = monitor.canDrop();\n      const isOver = monitor.isOver();\n\n      if (canDrop && isOver && onDrop) {\n        const { StudyInstanceUID, displaySetInstanceUID } = droppedItem;\n\n        onDrop({ viewportIndex, StudyInstanceUID, displaySetInstanceUID });\n      }\n    },\n    // Monitor, and collect props.\n    // Returned as values by `useDrop`\n    collect: monitor => ({\n      highlighted: monitor.canDrop(),\n      hovered: monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div\n      className={classNames(\n        'viewport-drop-target',\n        { hovered: hovered },\n        { highlighted: highlighted },\n        propClassName\n      )}\n      ref={drop}\n      data-cy={`viewport-container-${viewportIndex}`}\n    >\n      {children}\n    </div>\n  );\n};\n\nViewportPane.propTypes = {\n  children: PropTypes.node.isRequired,\n  viewportIndex: PropTypes.number.isRequired,\n  onDrop: PropTypes.func.isRequired,\n  className: PropTypes.string,\n};\n\nexport default ViewportPane;\n","import './ViewportGrid.css';\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { utils } from '@ohif/core';\nimport { useSnackbarContext, useLogger } from '@ohif/ui';\n//\nimport ViewportPane from './ViewportPane.js';\nimport DefaultViewport from './DefaultViewport.js';\nimport EmptyViewport from './EmptyViewport.js';\n\nconst { loadAndCacheDerivedDisplaySets } = utils;\n\nconst ViewportGrid = function(props) {\n  const {\n    activeViewportIndex,\n    availablePlugins,\n    defaultPlugin: defaultPluginName,\n    layout,\n    numRows,\n    numColumns,\n    setViewportData,\n    studies,\n    viewportData,\n    children,\n    isStudyLoaded,\n  } = props;\n\n  const rowSize = 100 / numRows;\n  const colSize = 100 / numColumns;\n\n  // http://grid.malven.co/\n  if (!viewportData || !viewportData.length) {\n    return null;\n  }\n\n  const snackbar = useSnackbarContext();\n  const logger = useLogger();\n\n  useEffect(() => {\n    if (isStudyLoaded) {\n      viewportData.forEach(displaySet => {\n        loadAndCacheDerivedDisplaySets(displaySet, studies, logger, snackbar);\n      });\n    }\n  }, [studies, viewportData, isStudyLoaded, snackbar]);\n\n  const getViewportPanes = () =>\n    layout.viewports.map((layout, viewportIndex) => {\n      const displaySet = viewportData[viewportIndex];\n\n      if (!displaySet) {\n        return null;\n      }\n\n      const data = {\n        displaySet,\n        studies,\n      };\n\n      // JAMES TODO:\n\n      // Use whichever plugin is currently in use in the panel\n      // unless nothing is specified. If nothing is specified\n      // and the display set has a plugin specified, use that.\n      //\n      // TODO: Change this logic to:\n      // - Plugins define how capable they are of displaying a SopClass\n      // - When updating a panel, ensure that the currently enabled plugin\n      // in the viewport is capable of rendering this display set. If not\n      // then use the most capable available plugin\n\n      const pluginName =\n        !layout.plugin && displaySet && displaySet.plugin\n          ? displaySet.plugin\n          : layout.plugin;\n\n      const ViewportComponent = _getViewportComponent(\n        data, // Why do we pass this as `ViewportData`, when that's not really what it is?\n        viewportIndex,\n        children,\n        availablePlugins,\n        pluginName,\n        defaultPluginName\n      );\n\n      return (\n        <ViewportPane\n          onDrop={setViewportData}\n          viewportIndex={viewportIndex} // Needed by `setViewportData`\n          className={classNames('viewport-container', {\n            active: activeViewportIndex === viewportIndex,\n          })}\n          key={viewportIndex}\n        >\n          {ViewportComponent}\n        </ViewportPane>\n      );\n    });\n\n  const ViewportPanes = React.useMemo(getViewportPanes, [\n    layout,\n    viewportData,\n    studies,\n    children,\n    availablePlugins,\n    defaultPluginName,\n    setViewportData,\n    activeViewportIndex,\n  ]);\n\n  return (\n    <div\n      data-cy=\"viewprt-grid\"\n      style={{\n        display: 'grid',\n        gridTemplateRows: `repeat(${numRows}, ${rowSize}%)`,\n        gridTemplateColumns: `repeat(${numColumns}, ${colSize}%)`,\n        height: '100%',\n        width: '100%',\n      }}\n    >\n      {ViewportPanes}\n    </div>\n  );\n};\n\nViewportGrid.propTypes = {\n  viewportData: PropTypes.array.isRequired,\n  supportsDrop: PropTypes.bool.isRequired,\n  activeViewportIndex: PropTypes.number.isRequired,\n  layout: PropTypes.object.isRequired,\n  availablePlugins: PropTypes.object.isRequired,\n  setViewportData: PropTypes.func.isRequired,\n  studies: PropTypes.array,\n  children: PropTypes.node,\n  defaultPlugin: PropTypes.string,\n  numRows: PropTypes.number.isRequired,\n  numColumns: PropTypes.number.isRequired,\n};\n\nViewportGrid.defaultProps = {\n  viewportData: [],\n  numRows: 1,\n  numColumns: 1,\n  layout: {\n    viewports: [{}],\n  },\n  activeViewportIndex: 0,\n  supportsDrop: true,\n  availablePlugins: {\n    DefaultViewport,\n  },\n  defaultPlugin: 'defaultViewportPlugin',\n};\n\n/**\n *\n *\n * @param {*} plugin\n * @param {*} viewportData\n * @param {*} viewportIndex\n * @param {*} children\n * @returns\n */\nfunction _getViewportComponent(\n  viewportData,\n  viewportIndex,\n  children,\n  availablePlugins,\n  pluginName,\n  defaultPluginName\n) {\n  if (viewportData.displaySet) {\n    pluginName = pluginName || defaultPluginName;\n    const ViewportComponent = availablePlugins[pluginName];\n\n    if (!ViewportComponent) {\n      throw new Error(\n        `No Viewport Component available for name ${pluginName}.\n         Available plugins: ${JSON.stringify(availablePlugins)}`\n      );\n    }\n\n    return (\n      <ViewportComponent\n        viewportData={viewportData}\n        viewportIndex={viewportIndex}\n        children={[children]}\n      />\n    );\n  }\n\n  return <EmptyViewport />;\n}\n\nexport default ViewportGrid;\n","/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultViewport(props) {\n  return <div>{JSON.stringify(props)}</div>;\n}\n","import ViewportGrid from './ViewportGrid.js';\nimport { MODULE_TYPES } from '@ohif/core';\nimport { connect } from 'react-redux';\nimport { extensionManager } from './../../App.js';\nimport memoize from 'lodash/memoize';\n\nconst getAvailableViewportModules = memoize(viewportModules => {\n  const availableViewportModules = {};\n  viewportModules.forEach(moduleDefinition => {\n    availableViewportModules[moduleDefinition.extensionId] =\n      moduleDefinition.module;\n  });\n  return availableViewportModules;\n});\n\nconst mapStateToProps = state => {\n  const viewportModules = extensionManager.modules[MODULE_TYPES.VIEWPORT];\n  const availableViewportModules = getAvailableViewportModules(viewportModules);\n\n  // TODO: Use something like state.plugins.defaultPlugin[MODULE_TYPES.VIEWPORT]\n  let defaultPlugin;\n  if (viewportModules.length) {\n    defaultPlugin = viewportModules[0].extensionId;\n  }\n\n  const { numRows, numColumns, layout, activeViewportIndex } = state.viewports;\n\n  return {\n    numRows,\n    numColumns,\n    layout,\n    activeViewportIndex,\n    // TODO: rename `availableViewportModules`\n    availablePlugins: availableViewportModules,\n    // TODO: rename `defaultViewportModule`\n    defaultPlugin,\n  };\n};\n\nconst ConnectedViewportGrid = connect(\n  mapStateToProps,\n  null\n)(ViewportGrid);\n\nexport default ConnectedViewportGrid;\n","import './ViewerMain.css';\nimport { servicesManager } from './../App.js';\nimport { Component } from 'react';\nimport { ConnectedViewportGrid } from './../components/ViewportGrid/index.js';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport memoize from 'lodash/memoize';\nimport _values from 'lodash/values';\n\nvar values = memoize(_values);\n\nclass ViewerMain extends Component {\n  static propTypes = {\n    activeViewportIndex: PropTypes.number.isRequired,\n    studies: PropTypes.array,\n    viewportSpecificData: PropTypes.object.isRequired,\n    layout: PropTypes.object.isRequired,\n    setViewportSpecificData: PropTypes.func.isRequired,\n    clearViewportSpecificData: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displaySets: [],\n    };\n  }\n\n  getDisplaySets(studies) {\n    const displaySets = [];\n    studies.forEach(study => {\n      study.displaySets.forEach(dSet => {\n        if (!dSet.plugin) {\n          dSet.plugin = 'cornerstone';\n        }\n        displaySets.push(dSet);\n      });\n    });\n\n    return displaySets;\n  }\n\n  findDisplaySet(studies, StudyInstanceUID, displaySetInstanceUID) {\n    const study = studies.find(study => {\n      return study.StudyInstanceUID === StudyInstanceUID;\n    });\n\n    if (!study) {\n      return;\n    }\n\n    return study.displaySets.find(displaySet => {\n      return displaySet.displaySetInstanceUID === displaySetInstanceUID;\n    });\n  }\n\n  componentDidMount() {\n    // Add beforeUnload event handler to check for unsaved changes\n    //window.addEventListener('beforeunload', unloadHandlers.beforeUnload);\n\n    // Get all the display sets for the viewer studies\n    if (this.props.studies) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevViewportAmount = prevProps.layout.viewports.length;\n    const viewportAmount = this.props.layout.viewports.length;\n    const isVtk = this.props.layout.viewports.some(vp => !!vp.vtk);\n\n    if (\n      this.props.studies !== prevProps.studies ||\n      (viewportAmount !== prevViewportAmount && !isVtk)\n    ) {\n      const displaySets = this.getDisplaySets(this.props.studies);\n      this.setState({ displaySets }, this.fillEmptyViewportPanes);\n    }\n  }\n\n  fillEmptyViewportPanes = () => {\n    // TODO: Here is the entry point for filling viewports on load.\n    const dirtyViewportPanes = [];\n    const { layout, viewportSpecificData } = this.props;\n    const { displaySets } = this.state;\n\n    if (!displaySets || !displaySets.length) {\n      return;\n    }\n\n    for (let i = 0; i < layout.viewports.length; i++) {\n      const viewportPane = viewportSpecificData[i];\n      const isNonEmptyViewport =\n        viewportPane &&\n        viewportPane.StudyInstanceUID &&\n        viewportPane.displaySetInstanceUID;\n\n      if (isNonEmptyViewport) {\n        dirtyViewportPanes.push({\n          StudyInstanceUID: viewportPane.StudyInstanceUID,\n          displaySetInstanceUID: viewportPane.displaySetInstanceUID,\n        });\n\n        continue;\n      }\n\n      const foundDisplaySet =\n        displaySets.find(\n          ds =>\n            !dirtyViewportPanes.some(\n              v => v.displaySetInstanceUID === ds.displaySetInstanceUID\n            )\n        ) || displaySets[displaySets.length - 1];\n\n      dirtyViewportPanes.push(foundDisplaySet);\n    }\n\n    dirtyViewportPanes.forEach((vp, i) => {\n      if (vp && vp.StudyInstanceUID) {\n        this.setViewportData({\n          viewportIndex: i,\n          StudyInstanceUID: vp.StudyInstanceUID,\n          displaySetInstanceUID: vp.displaySetInstanceUID,\n        });\n      }\n    });\n  };\n\n  setViewportData = ({\n    viewportIndex,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n  }) => {\n    let displaySet = this.findDisplaySet(\n      this.props.studies,\n      StudyInstanceUID,\n      displaySetInstanceUID\n    );\n\n    const { LoggerService, UINotificationService } = servicesManager.services;\n\n    if (displaySet.isDerived) {\n      const { Modality } = displaySet;\n      if (Modality === 'SEG' && servicesManager) {\n        const onDisplaySetLoadFailureHandler = error => {\n          LoggerService.error({ error, message: error.message });\n          UINotificationService.show({\n            title: 'DICOM Segmentation Loader',\n            message: error.message,\n            type: 'error',\n            autoClose: true,\n          });\n        };\n\n        const {\n          referencedDisplaySet,\n          activatedLabelmapPromise,\n        } = displaySet.getSourceDisplaySet(\n          this.props.studies,\n          true,\n          onDisplaySetLoadFailureHandler\n        );\n        displaySet = referencedDisplaySet;\n\n        activatedLabelmapPromise.then(activatedLabelmapIndex => {\n          const selectionFired = new CustomEvent(\n            'extensiondicomsegmentationsegselected',\n            {\n              detail: { activatedLabelmapIndex: activatedLabelmapIndex },\n            }\n          );\n          document.dispatchEvent(selectionFired);\n        });\n      } else if (Modality !== 'SR') {\n        displaySet = displaySet.getSourceDisplaySet(this.props.studies);\n      }\n\n      if (!displaySet) {\n        const error = new Error('Source data not present');\n        const message = 'Source data not present';\n        LoggerService.error({ error, message });\n        UINotificationService.show({\n          autoClose: false,\n          title: 'Fail to load series',\n          message,\n          type: 'error',\n        });\n      }\n    }\n\n    if (displaySet.isSOPClassUIDSupported === false) {\n      const error = new Error('Modality not supported');\n      const message = 'Modality not supported';\n      LoggerService.error({ error, message });\n      UINotificationService.show({\n        autoClose: false,\n        title: 'Fail to load series',\n        message,\n        type: 'error',\n      });\n    }\n\n    this.props.setViewportSpecificData(viewportIndex, displaySet);\n  };\n\n  render() {\n    const { viewportSpecificData } = this.props;\n    const viewportData = values(viewportSpecificData);\n\n    return (\n      <div className=\"ViewerMain\">\n        {this.state.displaySets.length && (\n          <ConnectedViewportGrid\n            isStudyLoaded={this.props.isStudyLoaded}\n            studies={this.props.studies}\n            viewportData={viewportData}\n            setViewportData={this.setViewportData}\n          >\n            {/* Children to add to each viewport that support children */}\n          </ConnectedViewportGrid>\n        )}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    // Clear the entire viewport specific data\n    const { viewportSpecificData } = this.props;\n    Object.keys(viewportSpecificData).forEach(viewportIndex => {\n      this.props.clearViewportSpecificData(viewportIndex);\n    });\n\n    // TODO: These don't have to be viewer specific?\n    // Could qualify for other routes?\n    // hotkeys.destroy();\n\n    // Remove beforeUnload event handler...\n    //window.removeEventListener('beforeunload', unloadHandlers.beforeUnload);\n    // Destroy the synchronizer used to update reference lines\n    //OHIF.viewer.updateImageSynchronizer.destroy();\n    // TODO: Instruct all plugins to clean up themselves\n    //\n    // Clear references to all stacks in the StackManager\n    //StackManager.clearStacks();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.Studies collection\n    //OHIF.viewer.Studies.removeAll();\n    // @TypeSafeStudies\n    // Clears OHIF.viewer.StudyMetadataList collection\n    //OHIF.viewer.StudyMetadataList.removeAll();\n  }\n}\n\nexport default ViewerMain;\n","import OHIF from '@ohif/core';\nimport ViewerMain from './ViewerMain';\nimport { connect } from 'react-redux';\n\nconst {\n  setViewportSpecificData,\n  clearViewportSpecificData,\n} = OHIF.redux.actions;\n\nconst mapStateToProps = state => {\n  const { activeViewportIndex, layout, viewportSpecificData } = state.viewports;\n\n  return {\n    activeViewportIndex,\n    layout,\n    viewportSpecificData,\n    viewports: state.viewports,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setViewportSpecificData: (viewportIndex, data) => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerMain = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerMain);\n\nexport default ConnectedViewerMain;\n","import './SidePanel.css';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst SidePanel = ({ from, isOpen, children, width }) => {\n  const fromSideClass = from === 'right' ? 'from-right' : 'from-left';\n\n  const styles = width\n    ? {\n        maxWidth: width,\n        marginRight: isOpen ? '0' : Number.parseInt(width) * -1,\n      }\n    : {};\n\n  return (\n    <section\n      style={styles}\n      className={classNames('sidepanel', fromSideClass, {\n        'is-open': isOpen,\n      })}\n    >\n      {children}\n    </section>\n  );\n};\n\nSidePanel.propTypes = {\n  from: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  children: PropTypes.node,\n  width: PropTypes.string,\n};\n\nexport default SidePanel;\n","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { ErrorBoundary, Icon } from '@ohif/ui';\nimport { servicesManager } from './../../App';\n\nimport './ErrorBoundaryDialog.css';\n\nconst { UIModalService } = servicesManager.services;\n\nconst ErrorBoundaryDialog = ({ context, children }) => {\n  const handleOnError = (error, componentStack) => {\n    const ErrorDialog = () => {\n      const [open, setOpen] = useState(false);\n\n      return (\n        <div className=\"ErrorFallback\" role=\"alert\">\n          <div className=\"ErrorBoundaryDialog\">\n            <h3 className=\"ErrorBoundaryDialogTitle\">\n              {context}: <span>{error.message}</span>\n            </h3>\n          </div>\n          <button\n            className=\"btn btn-primary btn-sm ErrorBoundaryDialogButton\"\n            onClick={() => setOpen(s => !s)}\n          >\n            <Icon\n              name=\"chevron-down\"\n              className={classnames('ErrorBoundaryDialogIcon', {\n                opened: open,\n              })}\n            />\n            Stack Trace\n          </button>\n\n          {open && <pre>{componentStack}</pre>}\n        </div>\n      );\n    };\n\n    UIModalService.show({\n      content: ErrorDialog,\n      title: `Something went wrong in ${context}`,\n    });\n  };\n\n  const fallbackComponent = () => (\n    <div className=\"ErrorFallback\" role=\"alert\">\n      <p>\n        Error rendering {context}. <br /> Check the browser console for more\n        details.\n      </p>\n    </div>\n  );\n\n  return (\n    <ErrorBoundary\n      fallbackComponent={fallbackComponent}\n      context={context}\n      onError={handleOnError}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n};\n\nErrorBoundaryDialog.propTypes = {\n  context: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default ErrorBoundaryDialog;\n","import ErrorBoundaryDialog from './ErrorBoundaryDialog';\n\nexport default ErrorBoundaryDialog;\n","import React, { useEffect } from 'react';\nimport { classes, utils } from '@ohif/core';\nimport PropTypes from 'prop-types';\nimport cs from 'cornerstone-core';\n\nimport './StudyPrefetcher.css';\n\nconst StudyPrefetcher = ({ studies, options }) => {\n  useEffect(() => {\n    const studyPrefetcher = classes.StudyPrefetcher.getInstance(\n      studies,\n      options\n    );\n    const studiesMetadata = studies.map(s =>\n      utils.studyMetadataManager.get(s.StudyInstanceUID)\n    );\n    studyPrefetcher.setStudies(studiesMetadata);\n\n    const onNewImage = ({ detail }) => {\n      /**\n       * When images are cached the viewport will load instantly and\n       * the display sets will not be available at this point in time.\n       *\n       * This code add display sets and updates the study prefetcher metadata.\n       */\n      const studiesMetadata = studies.map(s => {\n        const studyMetadata = utils.studyMetadataManager.get(\n          s.StudyInstanceUID\n        );\n        const displaySets = studyMetadata.getDisplaySets();\n        if (!displaySets || displaySets.length < 1) {\n          s.displaySets.forEach(ds => studyMetadata.addDisplaySet(ds));\n        }\n        return studyMetadata;\n      });\n      studyPrefetcher.setStudies(studiesMetadata);\n\n      const study = studyPrefetcher.getStudy(detail.image);\n      const series = studyPrefetcher.getSeries(study, detail.image);\n      const instance = studyPrefetcher.getInstance(series, detail.image);\n\n      if (study.displaySets && study.displaySets.length > 0) {\n        const {\n          displaySetInstanceUID,\n        } = studyPrefetcher.getDisplaySetBySOPInstanceUID(\n          study.displaySets,\n          instance\n        );\n        studyPrefetcher.prefetch(detail.element, displaySetInstanceUID);\n      }\n    };\n\n    const onElementEnabled = ({ detail }) => {\n      detail.element.addEventListener(cs.EVENTS.NEW_IMAGE, onNewImage);\n    };\n\n    cs.events.addEventListener(cs.EVENTS.ELEMENT_ENABLED, onElementEnabled);\n\n    return () => {\n      cs.events.removeEventListener(\n        cs.EVENTS.ELEMENT_ENABLED,\n        onElementEnabled\n      );\n      studyPrefetcher.destroy();\n    };\n  }, [options, studies]);\n\n  return null;\n};\n\nStudyPrefetcher.propTypes = {\n  studies: PropTypes.array.isRequired,\n  options: PropTypes.shape({\n    enabled: PropTypes.bool,\n    order: PropTypes.string,\n    displaySetCount: PropTypes.number,\n    preventCache: PropTypes.bool,\n    prefetchDisplaySetsTimeout: PropTypes.number,\n    includeActiveDisplaySet: PropTypes.bool,\n  }),\n};\n\nStudyPrefetcher.defaultProps = {\n  options: {\n    order: 'closest',\n    displaySetCount: 1,\n    preventCache: false,\n    prefetchDisplaySetsTimeout: 300,\n    includeActiveDisplaySet: false,\n  },\n};\n\nexport default StudyPrefetcher;\n","import { useEffect } from 'react';\nimport OHIF from '@ohif/core';\n\nconst { StudyLoadingListener } = OHIF.classes;\n\nconst StudyLoadingMonitor = ({ studies }) => {\n  useEffect(() => {\n    const studyLoadingListener = StudyLoadingListener.getInstance();\n\n    if (studies && studies.length > 0) {\n      studyLoadingListener.clear();\n      studyLoadingListener.addStudies(studies);\n    }\n\n    return () => {\n      studyLoadingListener.clear();\n    };\n  }, [studies]);\n\n  return null;\n};\n\nexport default StudyLoadingMonitor;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport OHIF, { MODULE_TYPES, DICOMSR } from '@ohif/core';\nimport { withDialog } from '@ohif/ui';\nimport moment from 'moment';\n\nimport ConnectedHeader from './ConnectedHeader.js';\nimport ToolbarRow from './ToolbarRow.js';\nimport ConnectedStudyBrowser from './ConnectedStudyBrowser.js';\nimport ConnectedViewerMain from './ConnectedViewerMain.js';\nimport SidePanel from './../components/SidePanel.js';\nimport ErrorBoundaryDialog from './../components/ErrorBoundaryDialog';\nimport { extensionManager, servicesManager } from './../App.js';\nimport { ReconstructionIssues } from './../../../core/src/enums.js';\n\n// Contexts\nimport WhiteLabelingContext from '../context/WhiteLabelingContext.js';\nimport UserManagerContext from '../context/UserManagerContext';\nimport AppContext from '../context/AppContext';\n\nimport './Viewer.css';\nimport StudyPrefetcher from '../components/StudyPrefetcher.js';\nimport StudyLoadingMonitor from '../components/StudyLoadingMonitor';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nclass Viewer extends Component {\n  static propTypes = {\n    studies: PropTypes.arrayOf(\n      PropTypes.shape({\n        StudyInstanceUID: PropTypes.string.isRequired,\n        StudyDate: PropTypes.string,\n        PatientID: PropTypes.string,\n        displaySets: PropTypes.arrayOf(\n          PropTypes.shape({\n            displaySetInstanceUID: PropTypes.string.isRequired,\n            SeriesDescription: PropTypes.string,\n            SeriesNumber: PropTypes.number,\n            InstanceNumber: PropTypes.number,\n            numImageFrames: PropTypes.number,\n            Modality: PropTypes.string.isRequired,\n            images: PropTypes.arrayOf(\n              PropTypes.shape({\n                getImageId: PropTypes.func.isRequired,\n              })\n            ),\n          })\n        ),\n      })\n    ),\n    studyInstanceUIDs: PropTypes.array,\n    activeServer: PropTypes.shape({\n      type: PropTypes.string,\n      wadoRoot: PropTypes.string,\n    }),\n    onTimepointsUpdated: PropTypes.func,\n    onMeasurementsUpdated: PropTypes.func,\n    // window.store.getState().viewports.viewportSpecificData\n    viewports: PropTypes.object.isRequired,\n    // window.store.getState().viewports.activeViewportIndex\n    activeViewportIndex: PropTypes.number.isRequired,\n    isStudyLoaded: PropTypes.bool,\n    dialog: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    const { activeServer } = this.props;\n    const server = Object.assign({}, activeServer);\n\n    const external = { servicesManager };\n\n    OHIF.measurements.MeasurementApi.setConfiguration({\n      dataExchange: {\n        retrieve: server => DICOMSR.retrieveMeasurements(server, external),\n        store: DICOMSR.storeMeasurements,\n      },\n      server,\n    });\n\n    OHIF.measurements.TimepointApi.setConfiguration({\n      dataExchange: {\n        retrieve: this.retrieveTimepoints,\n        store: this.storeTimepoints,\n        remove: this.removeTimepoint,\n        update: this.updateTimepoint,\n        disassociate: this.disassociateStudy,\n      },\n    });\n\n    this._getActiveViewport = this._getActiveViewport.bind(this);\n  }\n\n  state = {\n    isLeftSidePanelOpen: true,\n    isRightSidePanelOpen: false,\n    selectedRightSidePanel: '',\n    selectedLeftSidePanel: 'studies', // TODO: Don't hardcode this\n    thumbnails: [],\n  };\n\n  componentWillUnmount() {\n    if (this.props.dialog) {\n      this.props.dialog.dismissAll();\n    }\n\n    document.removeEventListener(\n      'segmentationLoadingError',\n      this._updateThumbnails\n    );\n  }\n\n  retrieveTimepoints = filter => {\n    OHIF.log.info('retrieveTimepoints');\n\n    // Get the earliest and latest study date\n    let earliestDate = new Date().toISOString();\n    let latestDate = new Date().toISOString();\n    if (this.props.studies) {\n      latestDate = new Date('1000-01-01').toISOString();\n      this.props.studies.forEach(study => {\n        const StudyDate = moment(study.StudyDate, 'YYYYMMDD').toISOString();\n        if (StudyDate < earliestDate) {\n          earliestDate = StudyDate;\n        }\n        if (StudyDate > latestDate) {\n          latestDate = StudyDate;\n        }\n      });\n    }\n\n    // Return a generic timepoint\n    return Promise.resolve([\n      {\n        timepointType: 'baseline',\n        timepointId: 'TimepointId',\n        studyInstanceUIDs: this.props.studyInstanceUIDs,\n        PatientID: filter.PatientID,\n        earliestDate,\n        latestDate,\n        isLocked: false,\n      },\n    ]);\n  };\n\n  storeTimepoints = timepointData => {\n    OHIF.log.info('storeTimepoints');\n    return Promise.resolve();\n  };\n\n  updateTimepoint = (timepointData, query) => {\n    OHIF.log.info('updateTimepoint');\n    return Promise.resolve();\n  };\n\n  removeTimepoint = timepointId => {\n    OHIF.log.info('removeTimepoint');\n    return Promise.resolve();\n  };\n\n  disassociateStudy = (timepointIds, StudyInstanceUID) => {\n    OHIF.log.info('disassociateStudy');\n    return Promise.resolve();\n  };\n\n  onTimepointsUpdated = timepoints => {\n    if (this.props.onTimepointsUpdated) {\n      this.props.onTimepointsUpdated(timepoints);\n    }\n  };\n\n  onMeasurementsUpdated = measurements => {\n    if (this.props.onMeasurementsUpdated) {\n      this.props.onMeasurementsUpdated(measurements);\n    }\n  };\n\n  componentDidMount() {\n    const { studies, isStudyLoaded } = this.props;\n    const { TimepointApi, MeasurementApi } = OHIF.measurements;\n    const currentTimepointId = 'TimepointId';\n\n    const timepointApi = new TimepointApi(currentTimepointId, {\n      onTimepointsUpdated: this.onTimepointsUpdated,\n    });\n\n    const measurementApi = new MeasurementApi(timepointApi, {\n      onMeasurementsUpdated: this.onMeasurementsUpdated,\n    });\n\n    this.currentTimepointId = currentTimepointId;\n    this.timepointApi = timepointApi;\n    this.measurementApi = measurementApi;\n\n    if (studies) {\n      const PatientID = studies[0] && studies[0].PatientID;\n\n      timepointApi.retrieveTimepoints({ PatientID });\n      if (isStudyLoaded) {\n        this.measurementApi.retrieveMeasurements(PatientID, [\n          currentTimepointId,\n        ]);\n      }\n\n      const activeViewport = this.props.viewports[\n        this.props.activeViewportIndex\n      ];\n      const activeDisplaySetInstanceUID = activeViewport\n        ? activeViewport.displaySetInstanceUID\n        : undefined;\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(\n          studies,\n          activeDisplaySetInstanceUID\n        ),\n      });\n    }\n\n    document.addEventListener(\n      'segmentationLoadingError',\n      this._updateThumbnails.bind(this),\n      false\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      studies,\n      isStudyLoaded,\n      activeViewportIndex,\n      viewports,\n    } = this.props;\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID = activeViewport\n      ? activeViewport.displaySetInstanceUID\n      : undefined;\n\n    const prevActiveViewport =\n      prevProps.viewports[prevProps.activeViewportIndex];\n    const prevActiveDisplaySetInstanceUID = prevActiveViewport\n      ? prevActiveViewport.displaySetInstanceUID\n      : undefined;\n\n    if (\n      studies !== prevProps.studies ||\n      activeViewportIndex !== prevProps.activeViewportIndex ||\n      activeDisplaySetInstanceUID !== prevActiveDisplaySetInstanceUID\n    ) {\n      this.setState({\n        thumbnails: _mapStudiesToThumbnails(\n          studies,\n          activeDisplaySetInstanceUID\n        ),\n        activeDisplaySetInstanceUID,\n      });\n    }\n    if (isStudyLoaded && isStudyLoaded !== prevProps.isStudyLoaded) {\n      const PatientID = studies[0] && studies[0].PatientID;\n      const { currentTimepointId } = this;\n\n      this.timepointApi.retrieveTimepoints({ PatientID });\n      this.measurementApi\n        .retrieveMeasurements(PatientID, [currentTimepointId])\n        .then(() => {\n          this._updateThumbnails();\n        });\n    }\n  }\n\n  _updateThumbnails() {\n    const { studies, activeViewportIndex, viewports } = this.props;\n\n    const activeViewport = viewports[activeViewportIndex];\n    const activeDisplaySetInstanceUID = activeViewport\n      ? activeViewport.displaySetInstanceUID\n      : undefined;\n\n    this.setState({\n      thumbnails: _mapStudiesToThumbnails(studies, activeDisplaySetInstanceUID),\n      activeDisplaySetInstanceUID,\n    });\n  }\n\n  _getActiveViewport() {\n    return this.props.viewports[this.props.activeViewportIndex];\n  }\n\n  render() {\n    let VisiblePanelLeft, VisiblePanelRight;\n    const panelExtensions = extensionManager.modules[MODULE_TYPES.PANEL];\n\n    panelExtensions.forEach(panelExt => {\n      panelExt.module.components.forEach(comp => {\n        if (comp.id === this.state.selectedRightSidePanel) {\n          VisiblePanelRight = comp.component;\n        } else if (comp.id === this.state.selectedLeftSidePanel) {\n          VisiblePanelLeft = comp.component;\n        }\n      });\n    });\n\n    return (\n      <>\n        {/* HEADER */}\n        <WhiteLabelingContext.Consumer>\n          {whiteLabeling => (\n            <UserManagerContext.Consumer>\n              {userManager => (\n                <AppContext.Consumer>\n                  {appContext => (\n                    <ConnectedHeader\n                      linkText={\n                        appContext.appConfig.showStudyList\n                          ? 'Study List'\n                          : undefined\n                      }\n                      linkPath={\n                        appContext.appConfig.showStudyList ? '/' : undefined\n                      }\n                      userManager={userManager}\n                    >\n                      {whiteLabeling &&\n                        whiteLabeling.createLogoComponentFn &&\n                        whiteLabeling.createLogoComponentFn(React)}\n                    </ConnectedHeader>\n                  )}\n                </AppContext.Consumer>\n              )}\n            </UserManagerContext.Consumer>\n          )}\n        </WhiteLabelingContext.Consumer>\n        {/* TOOLBAR */}\n        <ErrorBoundaryDialog context=\"ToolbarRow\">\n          <ToolbarRow\n            activeViewport={\n              this.props.viewports[this.props.activeViewportIndex]\n            }\n            isLeftSidePanelOpen={this.state.isLeftSidePanelOpen}\n            isRightSidePanelOpen={this.state.isRightSidePanelOpen}\n            selectedLeftSidePanel={\n              this.state.isLeftSidePanelOpen\n                ? this.state.selectedLeftSidePanel\n                : ''\n            }\n            selectedRightSidePanel={\n              this.state.isRightSidePanelOpen\n                ? this.state.selectedRightSidePanel\n                : ''\n            }\n            handleSidePanelChange={(side, selectedPanel) => {\n              const sideClicked = side && side[0].toUpperCase() + side.slice(1);\n              const openKey = `is${sideClicked}SidePanelOpen`;\n              const selectedKey = `selected${sideClicked}SidePanel`;\n              const updatedState = Object.assign({}, this.state);\n\n              const isOpen = updatedState[openKey];\n              const prevSelectedPanel = updatedState[selectedKey];\n              // RoundedButtonGroup returns `null` if selected button is clicked\n              const isSameSelectedPanel =\n                prevSelectedPanel === selectedPanel || selectedPanel === null;\n\n              updatedState[selectedKey] = selectedPanel || prevSelectedPanel;\n\n              const isClosedOrShouldClose = !isOpen || isSameSelectedPanel;\n              if (isClosedOrShouldClose) {\n                updatedState[openKey] = !updatedState[openKey];\n              }\n\n              this.setState(updatedState);\n            }}\n            studies={this.props.studies}\n          />\n        </ErrorBoundaryDialog>\n        <AppContext.Consumer>\n          {appContext => <StudyLoadingMonitor studies={this.props.studies} />}\n        </AppContext.Consumer>\n        {/* VIEWPORTS + SIDEPANELS */}\n        <div className=\"FlexboxLayout\">\n          {/* LEFT */}\n          <ErrorBoundaryDialog context=\"LeftSidePanel\">\n            <SidePanel from=\"left\" isOpen={this.state.isLeftSidePanelOpen}>\n              {VisiblePanelLeft ? (\n                <VisiblePanelLeft\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                />\n              ) : (\n                <AppContext.Consumer>\n                  {appContext => {\n                    const { appConfig } = appContext;\n                    const { studyPrefetcher } = appConfig;\n                    const { thumbnails } = this.state;\n                    return (\n                      <ConnectedStudyBrowser\n                        studies={thumbnails}\n                        studyMetadata={this.props.studies}\n                        showThumbnailProgressBar={\n                          studyPrefetcher &&\n                          studyPrefetcher.enabled &&\n                          studyPrefetcher.displayProgress\n                        }\n                      />\n                    );\n                  }}\n                </AppContext.Consumer>\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n\n          {/* MAIN */}\n          <div className={classNames('main-content')}>\n            <ErrorBoundaryDialog context=\"ViewerMain\">\n              <AppContext.Consumer>\n                {appContext => {\n                  const { appConfig } = appContext;\n                  const { studyPrefetcher } = appConfig;\n                  const { studies } = this.props;\n                  return (\n                    studyPrefetcher &&\n                    studyPrefetcher.enabled && (\n                      <StudyPrefetcher\n                        studies={studies}\n                        options={studyPrefetcher}\n                      />\n                    )\n                  );\n                }}\n              </AppContext.Consumer>\n              <ConnectedViewerMain\n                studies={this.props.studies}\n                isStudyLoaded={this.props.isStudyLoaded}\n              />\n            </ErrorBoundaryDialog>\n          </div>\n\n          {/* RIGHT */}\n          <ErrorBoundaryDialog context=\"RightSidePanel\">\n            <SidePanel from=\"right\" isOpen={this.state.isRightSidePanelOpen}>\n              {VisiblePanelRight && (\n                <VisiblePanelRight\n                  isOpen={this.state.isRightSidePanelOpen}\n                  viewports={this.props.viewports}\n                  studies={this.props.studies}\n                  activeIndex={this.props.activeViewportIndex}\n                  activeViewport={\n                    this.props.viewports[this.props.activeViewportIndex]\n                  }\n                  getActiveViewport={this._getActiveViewport}\n                />\n              )}\n            </SidePanel>\n          </ErrorBoundaryDialog>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withDialog(Viewer);\n\n/**\n * Async function to check if the displaySet has any derived one\n *\n * @param {*object} displaySet\n * @param {*object} study\n * @returns {bool}\n */\nconst _checkForDerivedDisplaySets = async function(displaySet, study) {\n  let derivedDisplaySetsNumber = 0;\n  if (\n    displaySet.Modality &&\n    !['SEG', 'SR', 'RTSTRUCT'].includes(displaySet.Modality)\n  ) {\n    const studyMetadata = studyMetadataManager.get(study.StudyInstanceUID);\n\n    const derivedDisplaySets = studyMetadata.getDerivedDatasets({\n      referencedSeriesInstanceUID: displaySet.SeriesInstanceUID,\n    });\n\n    derivedDisplaySetsNumber = derivedDisplaySets.length;\n  }\n\n  return derivedDisplaySetsNumber > 0;\n};\n\n/**\n * Async function to check if there are any inconsistences in the series.\n *\n * For segmentation returns any error during loading.\n *\n * For reconstructable 3D volume:\n * 1) Is series multiframe?\n * 2) Do the frames have different dimensions/number of components/orientations?\n * 3) Has the series any missing frames or irregular spacing?\n * 4) Is the series 4D?\n *\n * If not reconstructable, MPR is disabled.\n * The actual computations are done in isDisplaySetReconstructable.\n *\n * @param {*object} displaySet\n * @returns {[string]} an array of strings containing the warnings\n */\nconst _checkForSeriesInconsistencesWarnings = async function(displaySet) {\n  if (displaySet.inconsistencyWarnings) {\n    // warnings already checked and cached in displaySet\n    return displaySet.inconsistencyWarnings;\n  }\n\n  const inconsistencyWarnings = [];\n\n  if (displaySet.Modality !== 'SEG') {\n    if (\n      displaySet.reconstructionIssues &&\n      displaySet.reconstructionIssues.length !== 0\n    ) {\n      displaySet.reconstructionIssues.forEach(warning => {\n        switch (warning) {\n          case ReconstructionIssues.DATASET_4D:\n            inconsistencyWarnings.push('The dataset is 4D.');\n            break;\n          case ReconstructionIssues.VARYING_IMAGESDIMENSIONS:\n            inconsistencyWarnings.push(\n              'The dataset frames have different dimensions (rows, columns).'\n            );\n            break;\n          case ReconstructionIssues.VARYING_IMAGESCOMPONENTS:\n            inconsistencyWarnings.push(\n              'The dataset frames have different components (Sample per pixel).'\n            );\n            break;\n          case ReconstructionIssues.VARYING_IMAGESORIENTATION:\n            inconsistencyWarnings.push(\n              'The dataset frames have different orientation.'\n            );\n            break;\n          case ReconstructionIssues.IRREGULAR_SPACING:\n            inconsistencyWarnings.push(\n              'The dataset frames have different pixel spacing.'\n            );\n            break;\n          case ReconstructionIssues.MULTIFFRAMES:\n            inconsistencyWarnings.push('The dataset is a multiframes.');\n            break;\n          default:\n            break;\n        }\n      });\n      inconsistencyWarnings.push(\n        'The datasets is not a reconstructable 3D volume. MPR mode is not available.'\n      );\n    }\n\n    if (\n      displaySet.missingFrames &&\n      (!displaySet.reconstructionIssues ||\n        (displaySet.reconstructionIssues &&\n          !displaySet.reconstructionIssues.find(\n            warn => warn === ReconstructionIssues.DATASET_4D\n          )))\n    ) {\n      inconsistencyWarnings.push(\n        'The datasets is missing frames: ' + displaySet.missingFrames + '.'\n      );\n    }\n\n    if (displaySet.isSOPClassUIDSupported === false) {\n      inconsistencyWarnings.push('The datasets is not supported.');\n    }\n    displaySet.inconsistencyWarnings = inconsistencyWarnings;\n  } else {\n    if (displaySet.loadError) {\n      inconsistencyWarnings.push(displaySet.segLoadErrorMessagge);\n      displaySet.inconsistencyWarnings = inconsistencyWarnings;\n    }\n  }\n\n  return inconsistencyWarnings;\n};\n\n/**\n * Checks if display set is active, i.e. if the series is currently shown\n * in the active viewport.\n *\n * For data display set, this functions checks if the active\n * display set instance uid in the current active viewport is the same of the\n * thumbnail one.\n *\n * For derived modalities (e.g., SEG and RTSTRUCT), the function gets the\n * reference display set and then checks the reference uid with the active\n * display set instance uid.\n *\n * @param {displaySet} displaySet\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n * @returns {boolean} is active.\n */\nconst _isDisplaySetActive = function(\n  displaySet,\n  studies,\n  activeDisplaySetInstanceUID\n) {\n  let active = false;\n\n  const { displaySetInstanceUID } = displaySet;\n\n  // TO DO: in the future, we could possibly support new modalities\n  // we should have a list of all modalities here, instead of having hard coded checks\n  if (\n    displaySet.Modality !== 'SEG' &&\n    displaySet.Modality !== 'RTSTRUCT' &&\n    displaySet.Modality !== 'SR'\n  ) {\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\n  } else if (displaySet.Modality === 'SR') {\n    active = activeDisplaySetInstanceUID === displaySetInstanceUID;\n\n    if (!active && displaySet.getSourceDisplaySet) {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(\n        studies,\n        false\n      );\n      if (referencedDisplaySet && referencedDisplaySet.length !== 0) {\n        for (let i = 0; i < referencedDisplaySet.length; i++) {\n          if (\n            referencedDisplaySet[i].displaySetInstanceUID ===\n            activeDisplaySetInstanceUID\n          ) {\n            active = true;\n            break;\n          }\n        }\n      }\n    }\n  } else if (displaySet.getSourceDisplaySet) {\n    if (displaySet.Modality === 'SEG') {\n      const { referencedDisplaySet } = displaySet.getSourceDisplaySet(\n        studies,\n        false\n      );\n      active = referencedDisplaySet\n        ? activeDisplaySetInstanceUID ===\n          referencedDisplaySet.displaySetInstanceUID\n        : false;\n    } else {\n      const referencedDisplaySet = displaySet.getSourceDisplaySet(\n        studies,\n        false\n      );\n      active = referencedDisplaySet\n        ? activeDisplaySetInstanceUID ===\n          referencedDisplaySet.displaySetInstanceUID\n        : false;\n    }\n  }\n\n  return active;\n};\n\n/**\n * What types are these? Why do we have \"mapping\" dropped in here instead of in\n * a mapping layer?\n *\n * TODO[react]:\n * - Add showStackLoadingProgressBar option\n *\n * @param {Study[]} studies\n * @param {string} activeDisplaySetInstanceUID\n */\nconst _mapStudiesToThumbnails = function(studies, activeDisplaySetInstanceUID) {\n  return studies.map(study => {\n    const { StudyInstanceUID } = study;\n    const thumbnails = study.displaySets.map(displaySet => {\n      const {\n        displaySetInstanceUID,\n        SeriesDescription,\n        numImageFrames,\n        SeriesNumber,\n      } = displaySet;\n\n      let imageId;\n      let altImageText;\n\n      if (displaySet.Modality && displaySet.Modality === 'SEG') {\n        altImageText = 'SEG';\n      } else if (displaySet.Modality && displaySet.Modality === 'SR') {\n        altImageText = 'SR';\n      } else if (displaySet.images && displaySet.images.length) {\n        const imageIndex = Math.floor(displaySet.images.length / 2);\n        imageId = displaySet.images[imageIndex].getImageId();\n      } else if (displaySet.isSOPClassUIDSupported === false) {\n        altImageText = displaySet.SOPClassUIDNaturalized;\n      } else {\n        altImageText = displaySet.Modality ? displaySet.Modality : 'UN';\n      }\n\n      const hasWarnings = _checkForSeriesInconsistencesWarnings(displaySet);\n\n      const hasDerivedDisplaySets = _checkForDerivedDisplaySets(\n        displaySet,\n        study\n      );\n\n      return {\n        active: _isDisplaySetActive(\n          displaySet,\n          studies,\n          activeDisplaySetInstanceUID\n        ),\n        imageId,\n        altImageText,\n        displaySetInstanceUID,\n        SeriesDescription,\n        numImageFrames,\n        SeriesNumber,\n        hasWarnings,\n        hasDerivedDisplaySets,\n      };\n    });\n\n    return {\n      StudyInstanceUID,\n      thumbnails,\n    };\n  });\n};\n","import { connect } from 'react-redux';\nimport Viewer from './Viewer.js';\nimport OHIF from '@ohif/core';\n\nconst { setTimepoints, setMeasurements } = OHIF.redux.actions;\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n  return servers.servers.find(isActive);\n};\n\nconst mapStateToProps = state => {\n  const { viewports, servers } = state;\n  return {\n    viewports: viewports.viewportSpecificData,\n    activeViewportIndex: viewports.activeViewportIndex,\n    activeServer: getActiveServer(servers),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTimepointsUpdated: timepoints => {\n      dispatch(setTimepoints(timepoints));\n    },\n    onMeasurementsUpdated: measurements => {\n      dispatch(setMeasurements(measurements));\n    },\n  };\n};\n\nconst ConnectedViewer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Viewer);\n\nexport default ConnectedViewer;\n"],"sourceRoot":""}