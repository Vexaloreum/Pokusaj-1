{"version":3,"sources":["webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/utils/formatStudy.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/components/OHIFCornerstoneViewportOverlay.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/constants/toolNames.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/constants/scoordTypes.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/DICOMSRDisplayTool.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/initSRTools.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/utils/getToolAlias.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/ConnectedCornerstoneViewport.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/tools/checkForSRAnnotations.js","webpack:////home/jpleger/Code/moh/Viewers/extensions/cornerstone/src/OHIFCornerstoneViewport.js"],"names":["formatNumberPrecision","number","precision","parseFloat","toFixed","Button","styled","button","OHIFCornerstoneViewportOverlay","this","props","imageId","scale","windowWidth","windowCenter","inconsistencyWarnings","SRLabels","value","zoomPercentage","seriesMetadata","cornerstone","metaData","get","imagePlaneModule","rows","columns","sliceThickness","sliceLocation","seriesNumber","seriesDescription","generalStudyModule","studyDate","studyTime","studyDescription","patientModule","patientId","patientName","instanceNumber","frameRate","frameTime","compression","generalImageModule","lossyImageCompression","lossyImageCompressionRatio","lossyImageCompressionMethod","getCompression","wwwc","imageDimensions","imageIndex","stackSize","inconsistencyWarningsOn","length","getWarningContent","warningList","Array","isArray","listedWarnings","map","warn","index","key","Fragment","SRLabelsOn","normal","className","name","replace","trim","formatPN","date","strFormat","moment","format","formatDICOMDate","time","formatDICOMTime","placement","overlay","id","classNames","Icon","getWarningInfo","listedSRLabels","SRLabel","color","labels","visible","labelCodingSchemeDesignator","valueCodingSchemeDesignator","style","display","backgroundColor","disabled","label","getSRLabelsContent","getSRLabelsInfo","isNaN","PureComponent","PropTypes","isRequired","oneOfType","string","array","TOOL_NAMES","DICOM_SR_DISPLAY_TOOL","TEXT","POINT","MULTIPOINT","POLYLINE","CIRCLE","ELLIPSE","POLYGON","draw","importInternal","drawJoinedLines","drawCircle","drawEllipse","drawHandles","drawArrow","getNewContext","BaseTool","drawLinkedTextBox","DICOMSRDisplayTool","defaultProps","mixins","initialProps","Object","assign","_module","csTools","getModule","evt","eventData","detail","element","module","toolState","getToolState","trackingUniqueIdentifiersForElement","getters","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredToolData","data","filter","td","includes","TrackingUniqueIdentifier","i","renderableData","toolColors","getActiveColor","getToolColor","options","lineWidth","handleRadius","keys","forEach","GraphicType","renderableDataForGraphicType","SCOORD_TYPES","renderPoint","renderMultipoint","renderPolyLine","renderCircle","renderEllipse","context","canvasContext","canvas","handles","textBox","active","hasMoved","movesIndependently","drawnIndependently","allowedOutsideImage","hasBoundingBox","anchorPoints","points","image","xOffset","yOffset","point","push","x","y","circle","center","radius","ellipse","corner1","corner2","halfWidth","Math","abs","halfHeight","_getTextBoxAnchorPointsForRenderableData","bottomRight","max","text","labelLength","min","lines","labelEntry","_labelToShorthand","_getTextBoxLinesFromLabels","textBoxAnchorPoints","handleStartCanvas","pixelToCanvas","handleEndCanvas","SHORT_HAND_MAP","AREA","Length","CORNERSTONEFREETEXT","shortHand","undefined","initSRTools","targetElement","toolAlias","toolName","getToolAlias","cornerstoneTools","addToolForElement","setToolEnabledForElement","LengthTool","configuration","renderDashed","ArrowAnnotateTool","BidirectionalTool","EllipticalRoiTool","RectangleRoiTool","FreehandRoiTool","setToolActiveForElement","pointers","mouseButtonMask","OHIF","redux","actions","setViewportActive","setViewportSpecificData","measurements","MeasurementHandlers","onAdded","onRemoved","onModified","MEASUREMENT_ACTION_MAP","added","removed","modified","throttle","event","ConnectedCornerstoneViewport","connect","state","ownProps","dataFromStore","extensions","viewportIndex","isActive","viewports","activeViewportIndex","viewportSpecificData","isPlaying","cine","cineFrameRate","isStackPrefetchEnabled","hasOwnProperty","stackPrefetch","enabled","dispatch","onElementEnabled","enabledElement","setEnabledElement","plugin","onMeasurementsChanged","action","CornerstoneViewport","studyMetadataManager","utils","checkForSRAnnotations","displaySet","srModule","getEnabledElement","StudyInstanceUID","studyMetadata","srDisplaySets","getDisplaySets","ds","Modality","_measurements","m","loaded","measurement","setters","activeTrackingUniqueIdentifierForElement","cs","updateImage","StackManager","OHIFCornerstoneViewport","viewportData","studies","displaySetInstanceUID","SOPInstanceUID","frameIndex","stack","getCornerstoneStack","console","log","clearStacks","Error","study","find","displaySets","set","storedStack","findOrCreateStack","currentImageIdIndex","imageIds","findIndex","sopClassUIDs","getViewportData","then","setState","setStateFromProps","prevProps","prevDisplaySet","childrenWithProps","children","child","React","cloneElement","imageIdIndex","onNewImageDebounced","sopInstanceUid","onNewImage","onNewImageDebounceTime","viewportOverlayComponent","filteredSRLabels","ReferencedSOPInstanceUID","customProps","Component","object","node","bool"],"mappings":"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","file":"15.bundle.c7b1384d4fb06d1c2d42.js","sourcesContent":["import moment from 'moment';\n\n/**\n * Checks if value is valid.\n *\n * @param {number} value\n * @returns {boolean} is valid.\n */\nfunction isValidNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\n/**\n * Formats number precision.\n *\n * @param {number} number\n * @param {number} precision\n * @returns {number} formatted number.\n */\nfunction formatNumberPrecision(number, precision) {\n  if (number !== null) {\n    return parseFloat(number).toFixed(precision);\n  }\n}\n\n/**\n * Formats DICOM date.\n *\n * @param {string} date\n * @param {string} strFormat\n * @returns {string} formatted date.\n */\nfunction formatDICOMDate(date, strFormat = 'MMM D, YYYY') {\n  return moment(date, 'YYYYMMDD').format(strFormat);\n}\n\n/**\n *    DICOM Time is stored as HHmmss.SSS, where:\n *      HH 24 hour time:\n *        m mm        0..59   Minutes\n *        s ss        0..59   Seconds\n *        S SS SSS    0..999  Fractional seconds\n *\n *        Goal: '24:12:12'\n *\n * @param {*} time\n * @param {string} strFormat\n * @returns {string} formatted name.\n */\nfunction formatDICOMTime(time, strFormat = 'HH:mm:ss') {\n  return moment(time, 'HH:mm:ss').format(strFormat);\n}\n\n/**\n * Formats a patient name for display purposes\n *\n * @param {string} name\n * @returns {string} formatted name.\n */\nfunction formatPN(name) {\n  if (!name) {\n    return;\n  }\n\n  // Convert the first ^ to a ', '. String.replace() only affects\n  // the first appearance of the character.\n  const commaBetweenFirstAndLast = name.replace('^', ', ');\n\n  // Replace any remaining '^' characters with spaces\n  const cleaned = commaBetweenFirstAndLast.replace(/\\^/g, ' ');\n\n  // Trim any extraneous whitespace\n  return cleaned.trim();\n}\n\n/**\n * Gets compression type\n *\n * @param {number} imageId\n * @returns {string} comrpession type.\n */\nfunction getCompression(imageId) {\n  const generalImageModule =\n    cornerstone.metaData.get('generalImageModule', imageId) || {};\n  const {\n    lossyImageCompression,\n    lossyImageCompressionRatio,\n    lossyImageCompressionMethod,\n  } = generalImageModule;\n\n  if (lossyImageCompression === '01' && lossyImageCompressionRatio !== '') {\n    const compressionMethod = lossyImageCompressionMethod || 'Lossy: ';\n    const compressionRatio = formatNumberPrecision(\n      lossyImageCompressionRatio,\n      2\n    );\n    return compressionMethod + compressionRatio + ' : 1';\n  }\n\n  return 'Lossless / Uncompressed';\n}\n\nexport { isValidNumber,\n  formatNumberPrecision,\n  formatDICOMDate,\n  formatDICOMTime,\n  formatPN,\n  getCompression\n};\n","import { PureComponent } from 'react';\nimport React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport cornerstone from 'cornerstone-core';\nimport './OHIFCornerstoneViewportOverlay.css';\nimport {\n  isValidNumber,\n  formatNumberPrecision,\n  formatDICOMDate,\n  formatDICOMTime,\n  formatPN,\n  getCompression,\n} from '../utils/formatStudy';\nimport classNames from 'classnames';\nimport { Icon } from '@ohif/ui/src/elements/Icon';\nimport { Tooltip } from '@ohif/ui/src/components/tooltip';\nimport { OverlayTrigger } from '@ohif/ui/src/components/overlayTrigger';\n\nconst Button = styled.button`\n  color: white;\n  padding: 2px 7px;\n  border-radius: 10px;\n  outline: 0;\n  text-transform: none;\n  margin: 2px 2px;\n  cursor: pointer;\n  &:disabled {\n    cursor: default;\n    opacity: 0.9;\n  }\n`;\n\nclass OHIFCornerstoneViewportOverlay extends PureComponent {\n  static propTypes = {\n    scale: PropTypes.number.isRequired,\n    windowWidth: PropTypes.oneOfType([\n      PropTypes.number.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    windowCenter: PropTypes.oneOfType([\n      PropTypes.number.isRequired,\n      PropTypes.string.isRequired,\n    ]),\n    imageId: PropTypes.string.isRequired,\n    imageIndex: PropTypes.number.isRequired,\n    stackSize: PropTypes.number.isRequired,\n    inconsistencyWarnings: PropTypes.array,\n    SRLabels: PropTypes.array,\n  };\n\n  render() {\n    const {\n      imageId,\n      scale,\n      windowWidth,\n      windowCenter,\n      inconsistencyWarnings,\n      SRLabels,\n    } = this.props;\n\n    if (!imageId) {\n      return null;\n    }\n\n    const zoomPercentage = formatNumberPrecision(scale * 100, 0);\n    const seriesMetadata =\n      cornerstone.metaData.get('generalSeriesModule', imageId) || {};\n    const imagePlaneModule =\n      cornerstone.metaData.get('imagePlaneModule', imageId) || {};\n    const { rows, columns, sliceThickness, sliceLocation } = imagePlaneModule;\n    const { seriesNumber, seriesDescription } = seriesMetadata;\n\n    const generalStudyModule =\n      cornerstone.metaData.get('generalStudyModule', imageId) || {};\n    const { studyDate, studyTime, studyDescription } = generalStudyModule;\n\n    const patientModule =\n      cornerstone.metaData.get('patientModule', imageId) || {};\n    const { patientId, patientName } = patientModule;\n\n    const generalImageModule =\n      cornerstone.metaData.get('generalImageModule', imageId) || {};\n    const { instanceNumber } = generalImageModule;\n\n    const cineModule = cornerstone.metaData.get('cineModule', imageId) || {};\n    const { frameTime } = cineModule;\n\n    const frameRate = formatNumberPrecision(1000 / frameTime, 1);\n    const compression = getCompression(imageId);\n    const wwwc = `W: ${\n      windowWidth.toFixed ? windowWidth.toFixed(0) : windowWidth\n    } L: ${windowWidth.toFixed ? windowCenter.toFixed(0) : windowCenter}`;\n    const imageDimensions = `${columns} x ${rows}`;\n\n    const { imageIndex, stackSize } = this.props;\n\n    const inconsistencyWarningsOn =\n      inconsistencyWarnings && inconsistencyWarnings.length !== 0\n        ? true\n        : false;\n    const getWarningContent = warningList => {\n      if (Array.isArray(warningList)) {\n        const listedWarnings = warningList.map((warn, index) => {\n          return <li key={index}>{warn}</li>;\n        });\n\n        return <ol>{listedWarnings}</ol>;\n      } else {\n        return <React.Fragment>{warningList}</React.Fragment>;\n      }\n    };\n\n    const getWarningInfo = (seriesNumber, inconsistencyWarnings) => {\n      return (\n        <React.Fragment>\n          {inconsistencyWarnings.length != 0 ? (\n            <OverlayTrigger\n              key={seriesNumber}\n              placement=\"left\"\n              overlay={\n                <Tooltip\n                  placement=\"left\"\n                  className=\"in tooltip-warning\"\n                  id=\"tooltip-left\"\n                >\n                  <div className=\"warningTitle\">Series Inconsistencies</div>\n                  <div className=\"warningContent\">\n                    {getWarningContent(inconsistencyWarnings)}\n                  </div>\n                </Tooltip>\n              }\n            >\n              <div className={classNames('warning')}>\n                <span className=\"warning-icon\">\n                  <Icon name=\"exclamation-triangle\" />\n                </span>\n              </div>\n            </OverlayTrigger>\n          ) : (\n            <React.Fragment></React.Fragment>\n          )}\n        </React.Fragment>\n      );\n    };\n\n    const SRLabelsOn = SRLabels && SRLabels.length !== 0 ? true : false;\n\n    /**/\n\n    const getSRLabelsContent = SRLabels => {\n      if (Array.isArray(SRLabels)) {\n        const listedSRLabels = SRLabels.map((SRLabel, index) => {\n          const color = SRLabel.labels.color;\n          return (\n            SRLabel.labels.visible && (\n              <OverlayTrigger\n                key={index}\n                placement=\"top\"\n                overlay={\n                  <Tooltip\n                    placement=\"top\"\n                    className=\"in tooltip-warning\"\n                    id=\"tooltip-top\"\n                  >\n                    <div className=\"warningTitle\">\n                      {' '}\n                      Coding scheme designators{' '}\n                    </div>\n                    <div className=\"warningContent\">\n                      {SRLabel.labels.labelCodingSchemeDesignator +\n                        ' : ' +\n                        SRLabel.labels.valueCodingSchemeDesignator}\n                    </div>\n                  </Tooltip>\n                }\n              >\n                <div style={{ display: 'inline-block' }}>\n                  <Button\n                    style={{\n                      backgroundColor: color,\n                    }}\n                    disabled={true}\n                    key={index}\n                  >\n                    {SRLabel.labels.label + ' : ' + SRLabel.labels.value}\n                  </Button>\n                </div>\n              </OverlayTrigger>\n            )\n          );\n        });\n\n        return <ol>{listedSRLabels}</ol>;\n      } else {\n        return <React.Fragment></React.Fragment>;\n      }\n    };\n\n    const getSRLabelsInfo = SRLabels => {\n      return (\n        <React.Fragment>\n          {SRLabels.length != 0 ? (\n            getSRLabelsContent(SRLabels)\n          ) : (\n            <React.Fragment></React.Fragment>\n          )}\n        </React.Fragment>\n      );\n    };\n\n    const normal = (\n      <React.Fragment>\n        <div className=\"top-left overlay-element\">\n          <div>{formatPN(patientName)}</div>\n          <div>{patientId}</div>\n        </div>\n        <div className=\"top-right overlay-element\">\n          <div>{studyDescription}</div>\n          <div>\n            {formatDICOMDate(studyDate)} {formatDICOMTime(studyTime)}\n          </div>\n        </div>\n        <div className=\"bottom-right overlay-element\">\n          <div>Zoom: {zoomPercentage}%</div>\n          <div>{wwwc}</div>\n          <div className=\"compressionIndicator\">{compression}</div>\n        </div>\n        <div className=\"bottom-left2 warning\">\n          <div>\n            {inconsistencyWarningsOn\n              ? getWarningInfo(seriesNumber, inconsistencyWarnings)\n              : ''}\n          </div>\n        </div>\n        <div className=\"bottom-left3 warning\">\n          <div>{SRLabelsOn ? getSRLabelsInfo(SRLabels) : ''}</div>\n        </div>\n        <div className=\"bottom-left overlay-element\">\n          <div>{seriesNumber >= 0 ? `Ser: ${seriesNumber}` : ''}</div>\n          <div>\n            {stackSize > 1\n              ? `Img: ${instanceNumber} ${imageIndex}/${stackSize}`\n              : ''}\n          </div>\n          <div>\n            {frameRate >= 0 ? `${formatNumberPrecision(frameRate, 2)} FPS` : ''}\n            <div>{imageDimensions}</div>\n            <div>\n              {isValidNumber(sliceLocation)\n                ? `Loc: ${formatNumberPrecision(sliceLocation, 2)} mm `\n                : ''}\n              {sliceThickness\n                ? `Thick: ${formatNumberPrecision(sliceThickness, 2)} mm`\n                : ''}\n            </div>\n            <div>{seriesDescription}</div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n\n    return <div className=\"OHIFCornerstoneViewportOverlay\">{normal}</div>;\n  }\n}\n\nexport default OHIFCornerstoneViewportOverlay;\n","const TOOL_NAMES = {\n  DICOM_SR_DISPLAY_TOOL: 'DICOMSRDisplayTool',\n};\n\nexport default TOOL_NAMES;\n","export default {\n  TEXT: 'TEXT',\n  POINT: 'POINT',\n  MULTIPOINT: 'MULTIPOINT',\n  POLYLINE: 'POLYLINE',\n  CIRCLE: 'CIRCLE',\n  ELLIPSE: 'ELLIPSE',\n  POLYGON: 'POLYGON',\n};\n","import csTools, {\n  importInternal,\n  getToolState,\n  toolColors,\n} from 'cornerstone-tools';\n\nimport cornerstone from 'cornerstone-core';\n\n/** Internal imports */\nimport TOOL_NAMES from './constants/toolNames';\nimport SCOORD_TYPES from './constants/scoordTypes';\nimport id from './id';\n\n/** Cornerstone 3rd party dev kit imports */\nconst draw = importInternal('drawing/draw');\nconst drawJoinedLines = importInternal('drawing/drawJoinedLines');\nconst drawCircle = importInternal('drawing/drawCircle');\nconst drawEllipse = importInternal('drawing/drawEllipse');\nconst drawHandles = importInternal('drawing/drawHandles');\nconst drawArrow = importInternal('drawing/drawArrow');\nconst getNewContext = importInternal('drawing/getNewContext');\nconst BaseTool = importInternal('base/BaseTool');\nconst drawLinkedTextBox = importInternal('drawing/drawLinkedTextBox');\n\n/**\n * @class DICOMSRDisplayTool - Renders DICOMSR data in a read only manner (i.e. as an overlay).\n *\n * This is a generic render tool.\n *\n * A single tool that, given some schema, can render\n * POINT, MULTIPOINT, POLYLINE, CIRCLE, and ELLIPSE\n * value types for a given imageId.\n *\n *\n * @extends cornerstoneTools.BaseTool\n */\nexport default class DICOMSRDisplayTool extends BaseTool {\n  constructor(props = {}) {\n    const defaultProps = {\n      mixins: ['enabledOrDisabledBinaryTool'],\n      name: TOOL_NAMES.DICOM_SR_DISPLAY_TOOL,\n    };\n\n    const initialProps = Object.assign(defaultProps, props);\n\n    super(initialProps);\n\n    this._module = csTools.getModule(id);\n  }\n\n  renderToolData(evt) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const module = this._module;\n\n    const toolState = getToolState(element, this.name);\n\n    if (!toolState) {\n      return;\n    }\n\n    const trackingUniqueIdentifiersForElement = module.getters.trackingUniqueIdentifiersForElement(\n      element\n    );\n\n    const {\n      activeIndex,\n      trackingUniqueIdentifiers,\n    } = trackingUniqueIdentifiersForElement;\n\n    const activeTrackingUniqueIdentifier =\n      trackingUniqueIdentifiers[activeIndex];\n\n    // Filter toolData to only render the data for the active SR.\n    const filteredToolData = toolState.data.filter(td =>\n      trackingUniqueIdentifiers.includes(td.TrackingUniqueIdentifier)\n    );\n\n    let shouldRepositionTextBoxes = false;\n\n    for (let i = 0; i < filteredToolData.length; i++) {\n      const data = filteredToolData[i];\n      const { renderableData, labels } = data;\n\n      const color =\n        data.TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\n          ? toolColors.getActiveColor()\n          : toolColors.getToolColor();\n      const lineWidth = 2;\n      const options = {\n        color,\n        lineWidth,\n        handleRadius: 6,\n      };\n\n      Object.keys(renderableData).forEach(GraphicType => {\n        const renderableDataForGraphicType = renderableData[GraphicType];\n\n        switch (GraphicType) {\n          case SCOORD_TYPES.TEXT:\n            break;\n          case SCOORD_TYPES.POINT:\n            this.renderPoint(renderableDataForGraphicType, eventData, options);\n            break;\n          case SCOORD_TYPES.MULTIPOINT:\n            this.renderMultipoint(\n              renderableDataForGraphicType,\n              eventData,\n              options\n            );\n            break;\n          case SCOORD_TYPES.POLYGON:\n          case SCOORD_TYPES.POLYLINE:\n            this.renderPolyLine(\n              renderableDataForGraphicType,\n              eventData,\n              options\n            );\n            break;\n          case SCOORD_TYPES.CIRCLE:\n            this.renderCircle(renderableDataForGraphicType, eventData, options);\n            break;\n          case SCOORD_TYPES.ELLIPSE:\n            this.renderEllipse(\n              renderableDataForGraphicType,\n              eventData,\n              options\n            );\n            break;\n        }\n      });\n\n      const { element } = eventData;\n      const context = getNewContext(eventData.canvasContext.canvas);\n\n      if (!data.handles || !data.handles.textBox) {\n        const textBox = {\n          active: false,\n          hasMoved: true,\n          movesIndependently: false,\n          drawnIndependently: true,\n          allowedOutsideImage: true,\n          hasBoundingBox: true,\n        };\n\n        const anchorPoints = _getTextBoxAnchorPointsForRenderableData(\n          renderableData,\n          eventData\n        );\n        textBox.anchorPoints = anchorPoints;\n\n        const bottomRight = {\n          x: Math.max(...anchorPoints.map(point => point.x)),\n          y: Math.max(...anchorPoints.map(point => point.y)),\n        };\n\n        textBox.x = bottomRight.x;\n        textBox.y = bottomRight.y;\n\n        data.handles = {};\n        data.handles.textBox = textBox;\n\n        shouldRepositionTextBoxes = true;\n      }\n\n      const text = _getTextBoxLinesFromLabels(labels);\n\n      function textBoxAnchorPoints() {\n        return data.handles.textBox.anchorPoints;\n      }\n\n      if (data.handles.textBox.anchorPoints.length !== 0) {\n        draw(context, context => {\n          drawLinkedTextBox(\n            context,\n            element,\n            data.handles.textBox,\n            text,\n            data.handles,\n            textBoxAnchorPoints,\n            color,\n            lineWidth,\n            0,\n            true\n          );\n        });\n      }\n    }\n\n    // TOOD -> text boxes may overlap with other annotations at the moment.\n    // To be fixed after we get requirements.\n    // if (shouldRepositionTextBoxes) {\n    //   this.repositionTextBox(filteredToolData, eventData);\n    // }\n  }\n\n  // repositionTextBox(toolData, eventData) {\n  //   const toolBoundingBoxes = [];\n\n  //   for (let i = 0; i < toolData.length; i++) {\n  //     const toolDataI = toolData[i];\n\n  //     const { textBox } = toolDataI.handles;\n  //     const { anchorPoints } = textBox;\n\n  //     const boundingBox = _getBoundingBoxFromAnchorPoints(anchorPoints);\n  //     // Get the textbox bounding locations.\n  //     // Get the tool extents.\n  //   }\n  // }\n\n  renderPolyLine(renderableData, eventData, options) {\n    const { element } = eventData;\n    const context = getNewContext(eventData.canvasContext.canvas);\n    renderableData.forEach(points => {\n      draw(context, context => {\n        drawJoinedLines(context, element, points[0], points, options);\n      });\n    });\n  }\n\n  renderMultipoint(renderableData, eventData, options) {\n    const context = getNewContext(eventData.canvasContext.canvas);\n\n    renderableData.forEach(points => {\n      draw(context, context => {\n        drawHandles(context, eventData, points, options);\n      });\n    });\n  }\n\n  renderPoint(renderableData, eventData, options) {\n    // Render single point as an arrow.\n    const { element, image } = eventData;\n    const { rows, columns } = image;\n    const context = getNewContext(eventData.canvasContext.canvas);\n    const { color, lineWidth } = options;\n\n    // Find a suitable length for the image size.\n\n    const xOffset = columns / 10;\n    const yOffset = rows / 10;\n\n    renderableData.forEach(points => {\n      const point = points[0]; // The SCOORD type is POINT so the array length is 1.\n      draw(context, context => {\n        // Draw the arrow\n        const handleStartCanvas = cornerstone.pixelToCanvas(element, point);\n        const handleEndCanvas = cornerstone.pixelToCanvas(element, {\n          x: point.x + xOffset,\n          y: point.y + yOffset,\n        });\n\n        drawArrow(\n          context,\n          handleEndCanvas,\n          handleStartCanvas,\n          color,\n          lineWidth,\n          false\n        );\n      });\n    });\n  }\n\n  renderCircle(renderableData, eventData, options) {\n    const { element } = eventData;\n\n    const context = getNewContext(eventData.canvasContext.canvas);\n\n    renderableData.forEach(circle => {\n      const { center, radius } = circle;\n\n      drawCircle(context, element, center, radius, options);\n    });\n  }\n\n  renderEllipse(renderableData, eventData, options) {\n    const { element } = eventData;\n\n    const context = getNewContext(eventData.canvasContext.canvas);\n\n    renderableData.forEach(ellipse => {\n      const { corner1, corner2 } = ellipse;\n\n      drawEllipse(\n        context,\n        element,\n        corner1,\n        corner2,\n        options,\n        'pixel',\n        0 // TODO -> Work our the initial rotation and add it here so we render appropriately rotated ellipses.\n      );\n    });\n  }\n}\n\nfunction _getTextBoxLinesFromLabels(labels) {\n  // TODO -> max 3 for now (label + shortAxis + longAxis), need a generic solution for this!\n\n  const labelLength = Math.min(labels.length, 3);\n  const lines = [];\n\n  for (let i = 0; i < labelLength; i++) {\n    const labelEntry = labels[i];\n    lines.push(`${_labelToShorthand(labelEntry.label)}${labelEntry.value}`);\n  }\n\n  return lines;\n}\n\nconst SHORT_HAND_MAP = {\n  'Short Axis': 'W ',\n  'Long Axis': 'L ',\n  AREA: 'Area ',\n  Length: '',\n  CORNERSTONEFREETEXT: '',\n};\n\nfunction _labelToShorthand(label) {\n  const shortHand = SHORT_HAND_MAP[label];\n\n  if (shortHand !== undefined) {\n    return shortHand;\n  }\n\n  return label;\n}\n\nfunction _getTextBoxAnchorPointsForRenderableData(renderableData, eventData) {\n  let anchorPoints = [];\n\n  Object.keys(renderableData).forEach(GraphicType => {\n    const renderableDataForGraphicType = renderableData[GraphicType];\n\n    switch (GraphicType) {\n      case SCOORD_TYPES.TEXT:\n        break;\n      case SCOORD_TYPES.POINT:\n        renderableDataForGraphicType.forEach(points => {\n          anchorPoints = [...anchorPoints, ...points];\n\n          // Add other arrow point based on image size.\n          const { image } = eventData;\n          const { rows, columns } = image;\n\n          const xOffset = columns / 10;\n          const yOffset = rows / 10;\n          const point = points[0];\n\n          anchorPoints.push({ x: point.x + xOffset, y: point.y + yOffset });\n        });\n\n        break;\n      case SCOORD_TYPES.MULTIPOINT:\n      case SCOORD_TYPES.POLYLINE:\n      case SCOORD_TYPES.POLYGON:\n        renderableDataForGraphicType.forEach(points => {\n          anchorPoints = [...anchorPoints, ...points];\n        });\n        break;\n      case SCOORD_TYPES.CIRCLE:\n        renderableDataForGraphicType.forEach(circle => {\n          const { center, radius } = circle;\n\n          anchorPoints.push({ x: center.x + radius, y: center.y });\n          anchorPoints.push({ x: center.x - radius, y: center.y });\n          anchorPoints.push({ x: center.x, y: center.y + radius });\n          anchorPoints.push({ x: center.x, y: center.y - radius });\n        });\n\n        break;\n      case SCOORD_TYPES.ELLIPSE:\n        renderableDataForGraphicType.forEach(ellipse => {\n          const { corner1, corner2 } = ellipse;\n\n          const halfWidth = Math.abs(corner1.x - corner2.x) / 2;\n          const halfHeight = Math.abs(corner1.y - corner2.y) / 2;\n\n          const center = {\n            x: (corner1.x + corner2.x) / 2,\n            y: (corner1.y + corner2.y) / 2,\n          };\n\n          anchorPoints.push({ x: center.x + halfWidth, y: center.y });\n          anchorPoints.push({ x: center.x - halfWidth, y: center.y });\n          anchorPoints.push({ x: center.x, y: center.y + halfHeight });\n          anchorPoints.push({ x: center.x, y: center.y - halfHeight });\n        });\n        break;\n    }\n  });\n\n  return anchorPoints;\n}\n\nfunction _getBoundingBoxFromAnchorPoints(anchorPoints) {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  anchorPoints.forEach(point => {\n    const { x, y } = point;\n\n    if (x > maxX) {\n      maxX = x;\n    } else if (x < minX) {\n      minX = x;\n    }\n\n    if (y > maxY) {\n      maxY = y;\n    } else if (y < minY) {\n      minY = y;\n    }\n  });\n}\n","import cornerstoneTools from 'cornerstone-tools';\nimport DICOMSRDisplayTool from './DICOMSRDisplayTool';\nimport TOOL_NAMES from './constants/toolNames';\nimport getToolAlias from './utils/getToolAlias';\n\n/**\n * Initialize SR cornerstone tools.\n *\n * @param {*} targetElement\n */\nconst initSRTools = targetElement => {\n  const primaryToolId = 'Wwwc';\n  const toolAlias = getToolAlias(primaryToolId); // These are 1:1 for built-in only\n\n  // ~~ MAGIC\n  cornerstoneTools.addToolForElement(targetElement, DICOMSRDisplayTool);\n  cornerstoneTools.setToolEnabledForElement(\n    targetElement,\n    TOOL_NAMES.DICOM_SR_DISPLAY_TOOL\n  );\n\n  // ~~ Variants\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.LengthTool,\n    {\n      name: 'SRLength',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.ArrowAnnotateTool,\n    {\n      name: 'SRArrowAnnotate',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.BidirectionalTool,\n    {\n      name: 'SRBidirectional',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.EllipticalRoiTool,\n    {\n      name: 'SREllipticalRoi',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.RectangleRoiTool,\n    {\n      name: 'SRRectangleRoi',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n  cornerstoneTools.addToolForElement(\n    targetElement,\n    cornerstoneTools.FreehandRoiTool,\n    {\n      name: 'SRFreehandRoi',\n      configuration: {\n        renderDashed: true,\n      },\n    }\n  );\n\n  // ~~ Business as usual\n  cornerstoneTools.setToolActiveForElement(targetElement, 'PanMultiTouch', {\n    pointers: 2,\n  });\n  cornerstoneTools.setToolActiveForElement(targetElement, 'ZoomTouchPinch', {});\n\n  // TODO: Add always dashed tool alternative aliases\n  // TODO: or same name... alternative config?\n  cornerstoneTools.setToolActiveForElement(targetElement, toolAlias, {\n    mouseButtonMask: 1,\n  });\n  cornerstoneTools.setToolActiveForElement(targetElement, 'Pan', {\n    mouseButtonMask: 4,\n  });\n  cornerstoneTools.setToolActiveForElement(targetElement, 'Zoom', {\n    mouseButtonMask: 2,\n  });\n  cornerstoneTools.setToolActiveForElement(\n    targetElement,\n    'StackScrollMouseWheel',\n    {}\n  );\n};\n\nexport default initSRTools;\n","/**\n * Get cornerstone tool alias.\n *\n * @param {string} toolName\n * @returns tool alias\n */\nexport default function getToolAlias(toolName) {\n  let toolAlias = toolName;\n\n  switch (toolName) {\n    case 'Length':\n      toolAlias = 'SRLength';\n      break;\n    case 'Bidirectional':\n      toolAlias = 'SRBidirectional';\n      break;\n    case 'ArrowAnnotate':\n      toolAlias = 'SRArrowAnnotate';\n      break;\n    case 'EllipticalRoi':\n      toolAlias = 'SREllipticalRoi';\n      break;\n    case 'FreehandRoi':\n      toolAlias = 'SRFreehandRoi';\n      break;\n    case 'RectangleRoi':\n      toolAlias = 'SRRectangleRoi';\n      break;\n  }\n\n  return toolAlias;\n}\n","import CornerstoneViewport from 'react-cornerstone-viewport';\nimport OHIF from '@ohif/core';\nimport { connect } from 'react-redux';\nimport throttle from 'lodash.throttle';\nimport { setEnabledElement } from './state';\nimport initSRTools from './tools/initSRTools';\n\nconst { setViewportActive, setViewportSpecificData } = OHIF.redux.actions;\nconst {\n  onAdded,\n  onRemoved,\n  onModified,\n} = OHIF.measurements.MeasurementHandlers;\n\n// TODO: Transition to enums for the action names so that we can ensure they stay up to date\n// everywhere they're used.\nconst MEASUREMENT_ACTION_MAP = {\n  added: onAdded,\n  removed: onRemoved,\n  modified: throttle(event => {\n    return onModified(event);\n  }, 300),\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  let dataFromStore;\n\n  // TODO: This may not be updated anymore :thinking:\n  if (state.extensions && state.extensions.cornerstone) {\n    dataFromStore = state.extensions.cornerstone;\n  }\n\n  // If this is the active viewport, enable prefetching.\n  const { viewportIndex } = ownProps; //.viewportData;\n  const isActive = viewportIndex === state.viewports.activeViewportIndex;\n  const viewportSpecificData =\n    state.viewports.viewportSpecificData[viewportIndex] || {};\n\n  // CINE\n  let isPlaying = false;\n  let frameRate = 24;\n\n  if (viewportSpecificData && viewportSpecificData.cine) {\n    const cine = viewportSpecificData.cine;\n\n    isPlaying = cine.isPlaying === true;\n    frameRate = cine.cineFrameRate || frameRate;\n  }\n\n  return {\n    // layout: state.viewports.layout,\n    isActive,\n    // TODO: Need a cleaner and more versatile way.\n    // Currently justing using escape hatch + commands\n    // activeTool: activeButton && activeButton.command,\n    ...dataFromStore,\n    isStackPrefetchEnabled: ownProps.hasOwnProperty('isStackPrefetchEnabled')\n      ? ownProps.isStackPrefetchEnabled\n      : ownProps.stackPrefetch\n      ? ownProps.stackPrefetch.enabled\n      : isActive,\n    isPlaying,\n    frameRate,\n    //stack: viewportSpecificData.stack,\n    // viewport: viewportSpecificData.viewport,\n  };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { viewportIndex } = ownProps;\n\n  return {\n    setViewportActive: () => {\n      dispatch(setViewportActive(viewportIndex));\n    },\n\n    setViewportSpecificData: data => {\n      dispatch(setViewportSpecificData(viewportIndex, data));\n    },\n\n    /**\n     * Our component \"enables\" the underlying dom element on \"componentDidMount\"\n     * It listens for that event, and then emits the enabledElement. We can grab\n     * a reference to it here, to make playing with cornerstone's native methods\n     * easier.\n     */\n    onElementEnabled: event => {\n      const enabledElement = event.detail.element;\n      setEnabledElement(viewportIndex, enabledElement);\n      dispatch(\n        setViewportSpecificData(viewportIndex, {\n          // TODO: Hack to make sure our plugin info is available from the outset\n          plugin: 'cornerstone',\n        })\n      );\n      initSRTools(enabledElement);\n    },\n\n    onMeasurementsChanged: (event, action) => {\n      return MEASUREMENT_ACTION_MAP[action](event);\n    },\n  };\n};\n\nconst ConnectedCornerstoneViewport = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CornerstoneViewport);\n\nexport default ConnectedCornerstoneViewport;\n","import csTools from 'cornerstone-tools';\nimport cs from 'cornerstone-core';\nimport OHIF from '@ohif/core';\n\nimport { getEnabledElement } from '../state';\nimport id from './id';\n\nconst { studyMetadataManager } = OHIF.utils;\n\nconst checkForSRAnnotations = ({ viewportIndex, displaySet }) => {\n  const srModule = csTools.getModule(id);\n\n  const element = getEnabledElement(viewportIndex);\n  if (!element) {\n    return;\n  }\n\n  const { StudyInstanceUID } = displaySet;\n  const studyMetadata = studyMetadataManager.get(StudyInstanceUID);\n  if (!studyMetadata) {\n    return;\n  }\n\n  const srDisplaySets = studyMetadata\n    .getDisplaySets()\n    .filter(ds => ds.Modality === 'SR');\n  if (srDisplaySets.length === 0) {\n    return;\n  }\n\n  const { measurements: _measurements } = srDisplaySets[0];\n  if (!_measurements || _measurements.length < 1) {\n    return;\n  }\n\n  const measurements = _measurements.filter(m => m.loaded === true);\n  const measurement = measurements[0];\n  if (!measurement) {\n    return;\n  }\n\n  srModule.setters.trackingUniqueIdentifiersForElement(\n    element,\n    measurements.map(measurement => measurement.TrackingUniqueIdentifier),\n    measurement\n  );\n\n  const { TrackingUniqueIdentifier } = measurement;\n  srModule.setters.activeTrackingUniqueIdentifierForElement(\n    element,\n    TrackingUniqueIdentifier\n  );\n\n  cs.updateImage(element);\n};\n\nexport default checkForSRAnnotations;\n","import React, { Component } from 'react';\n\nimport OHIFCornerstoneViewportOverlay from './components/OHIFCornerstoneViewportOverlay';\nimport ConnectedCornerstoneViewport from './ConnectedCornerstoneViewport';\nimport OHIF from '@ohif/core';\nimport PropTypes from 'prop-types';\nimport cornerstone from 'cornerstone-core';\nimport checkForSRAnnotations from './tools/checkForSRAnnotations';\n\nconst { StackManager } = OHIF.utils;\n\nclass OHIFCornerstoneViewport extends Component {\n  state = {\n    viewportData: null,\n  };\n\n  static defaultProps = {\n    customProps: {},\n    isStackPrefetchEnabled: true,\n  };\n\n  static propTypes = {\n    studies: PropTypes.object,\n    displaySet: PropTypes.object,\n    viewportIndex: PropTypes.number,\n    children: PropTypes.node,\n    customProps: PropTypes.object,\n    stackPrefetch: PropTypes.object,\n    isStackPrefetchEnabled: PropTypes.bool,\n  };\n\n  static id = 'OHIFCornerstoneViewport';\n\n  static init() {\n    console.log('OHIFCornerstoneViewport init()');\n  }\n\n  static destroy() {\n    console.log('OHIFCornerstoneViewport destroy()');\n    StackManager.clearStacks();\n  }\n\n  /**\n   * Obtain the CornerstoneTools Stack for the specified display set.\n   *\n   * @param {Object[]} studies\n   * @param {String} StudyInstanceUID\n   * @param {String} displaySetInstanceUID\n   * @param {String} [SOPInstanceUID]\n   * @param {Number} [frameIndex=1]\n   * @return {Object} CornerstoneTools Stack\n   */\n  static getCornerstoneStack(\n    studies,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n    SOPInstanceUID,\n    frameIndex = 0\n  ) {\n    if (!studies || !studies.length) {\n      throw new Error('Studies not provided.');\n    }\n\n    if (!StudyInstanceUID) {\n      throw new Error('StudyInstanceUID not provided.');\n    }\n\n    if (!displaySetInstanceUID) {\n      throw new Error('StudyInstanceUID not provided.');\n    }\n\n    // Create shortcut to displaySet\n    const study = studies.find(\n      study => study.StudyInstanceUID === StudyInstanceUID\n    );\n\n    if (!study) {\n      throw new Error('Study not found.');\n    }\n\n    const displaySet = study.displaySets.find(set => {\n      return set.displaySetInstanceUID === displaySetInstanceUID;\n    });\n\n    if (!displaySet) {\n      throw new Error('Display Set not found.');\n    }\n\n    // Get stack from Stack Manager\n    const storedStack = StackManager.findOrCreateStack(study, displaySet);\n\n    // Clone the stack here so we don't mutate it\n    const stack = Object.assign({}, storedStack);\n    stack.currentImageIdIndex = frameIndex;\n\n    if (SOPInstanceUID) {\n      const index = stack.imageIds.findIndex(imageId => {\n        const imageIdSOPInstanceUID = cornerstone.metaData.get(\n          'SOPInstanceUID',\n          imageId\n        );\n\n        return imageIdSOPInstanceUID === SOPInstanceUID;\n      });\n\n      if (index > -1) {\n        stack.currentImageIdIndex = index;\n      } else {\n        console.warn(\n          'SOPInstanceUID provided was not found in specified DisplaySet'\n        );\n      }\n    }\n\n    return stack;\n  }\n\n  getViewportData = async (\n    studies,\n    StudyInstanceUID,\n    displaySetInstanceUID,\n    SOPInstanceUID,\n    frameIndex\n  ) => {\n    let viewportData;\n\n    const stack = OHIFCornerstoneViewport.getCornerstoneStack(\n      studies,\n      StudyInstanceUID,\n      displaySetInstanceUID,\n      SOPInstanceUID,\n      frameIndex\n    );\n\n    viewportData = {\n      StudyInstanceUID,\n      displaySetInstanceUID,\n      stack,\n    };\n\n    return viewportData;\n  };\n\n  setStateFromProps() {\n    const { studies, displaySet } = this.props.viewportData;\n    const {\n      StudyInstanceUID,\n      displaySetInstanceUID,\n      sopClassUIDs,\n      SOPInstanceUID,\n      frameIndex,\n    } = displaySet;\n\n    if (!StudyInstanceUID || !displaySetInstanceUID) {\n      return;\n    }\n\n    if (sopClassUIDs && sopClassUIDs.length > 1) {\n      console.warn(\n        'More than one SOPClassUID in the same series is not yet supported.'\n      );\n    }\n\n    this.getViewportData(\n      studies,\n      StudyInstanceUID,\n      displaySetInstanceUID,\n      SOPInstanceUID,\n      frameIndex\n    ).then(viewportData => {\n      this.setState({\n        viewportData,\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.setStateFromProps();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { displaySet } = this.props.viewportData;\n    const prevDisplaySet = prevProps.viewportData.displaySet;\n\n    if (\n      displaySet.displaySetInstanceUID !==\n        prevDisplaySet.displaySetInstanceUID ||\n      displaySet.SOPInstanceUID !== prevDisplaySet.SOPInstanceUID ||\n      displaySet.frameIndex !== prevDisplaySet.frameIndex\n    ) {\n      const { viewportIndex } = this.props;\n      checkForSRAnnotations({ displaySet, viewportIndex });\n      this.setStateFromProps();\n    }\n  }\n\n  render() {\n    let childrenWithProps = null;\n\n    if (!this.state.viewportData) {\n      return null;\n    }\n    const { viewportIndex } = this.props;\n    const { inconsistencyWarnings } = this.props.viewportData.displaySet;\n    const {\n      imageIds,\n      currentImageIdIndex,\n      // If this comes from the instance, would be a better default\n      // `FrameTime` in the instance\n      // frameRate = 0,\n    } = this.state.viewportData.stack;\n\n    // TODO: Does it make more sense to use Context?\n    if (this.props.children && this.props.children.length) {\n      childrenWithProps = this.props.children.map((child, index) => {\n        return (\n          child &&\n          React.cloneElement(child, {\n            viewportIndex: this.props.viewportIndex,\n            key: index,\n          })\n        );\n      });\n    }\n\n    const newImageHandler = ({ currentImageIdIndex, sopInstanceUid }) => {\n      const { displaySet } = this.props.viewportData;\n      const { StudyInstanceUID } = displaySet;\n\n      if (currentImageIdIndex >= 0) {\n        this.props.onNewImage({\n          StudyInstanceUID,\n          SOPInstanceUID: sopInstanceUid,\n          frameIndex: currentImageIdIndex,\n          activeViewportIndex: viewportIndex,\n        });\n      }\n    };\n\n    const overlay = props => {\n      const displaySet = this.props.viewportData.displaySet;\n      let filteredSRLabels;\n      if (displaySet.SRLabels && displaySet.SRLabels.length !== 0) {\n        filteredSRLabels = displaySet.SRLabels.filter(\n          SRLabel =>\n            SRLabel.ReferencedSOPInstanceUID === displaySet.SOPInstanceUID\n        );\n      }\n\n      return (\n        <OHIFCornerstoneViewportOverlay\n          {...props}\n          inconsistencyWarnings={inconsistencyWarnings}\n          SRLabels={filteredSRLabels}\n        />\n      );\n    };\n\n    return (\n      <>\n        <ConnectedCornerstoneViewport\n          viewportIndex={viewportIndex}\n          imageIds={imageIds}\n          imageIdIndex={currentImageIdIndex}\n          onNewImageDebounced={newImageHandler}\n          onNewImageDebounceTime={300}\n          viewportOverlayComponent={overlay}\n          stackPrefetch={this.props.stackPrefetch}\n          isStackPrefetchEnabled={this.props.isStackPrefetchEnabled}\n          // ~~ Connected (From REDUX)\n          // frameRate={frameRate}\n          // isPlaying={false}\n          // onElementEnabled={() => {}}\n          // setViewportActive{() => {}}\n          {...this.props.customProps}\n        />\n        {childrenWithProps}\n      </>\n    );\n  }\n}\n\nexport default OHIFCornerstoneViewport;\n"],"sourceRoot":""}