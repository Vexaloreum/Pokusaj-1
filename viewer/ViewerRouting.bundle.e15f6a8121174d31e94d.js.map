{"version":3,"sources":["webpack:///./customHooks/useQuery.js","webpack:///./routes/ViewerRouting.js","webpack:///./customHooks/usePrevious.js","webpack:///./googleCloud/api/GoogleCloudApi.js","webpack:////home/jpleger/Code/moh/Viewers/node_modules/lodash/_baseValues.js","webpack:///./connectedComponents/ViewerRetrieveStudyData.js","webpack:///./connectedComponents/ConnectedViewerRetrieveStudyData.js","webpack:////home/jpleger/Code/moh/Viewers/node_modules/lodash/values.js","webpack:///./googleCloud/utils/getServers.js","webpack:///./customHooks/useServer.js"],"names":["URLSearchParams","useLocation","search","UrlUtil","utils","urlUtil","getSeriesInstanceUIDs","seriesInstanceUIDs","routeLocation","queryFilters","queryString","getQueryFilters","querySeriesUIDs","_seriesInstanceUIDs","paramString","parseParam","ViewerRouting","routeMatch","match","location","params","project","dataset","dicomStore","studyInstanceUIDs","authToken","useQuery","get","user","getAccessToken","server","useServer","studyUIDs","seriesUIDs","ConnectedViewerRetrieveStudyData","propTypes","PropTypes","shape","string","isRequired","any","usePrevious","value","ref","useRef","useEffect","current","GoogleCloudApi","accessToken","console","error","this","urlBase","urlStr","config","url","URL","data","fetch","fetchConfig","response","json","status","nextPageToken","pageToken","doRequest","key","subPage","hasOwnProperty","concat","isError","message","projectId","urlBaseProject","locationId","Error","method","headers","Authorization","healthcareApiEndpoint","arrayMap","module","exports","object","props","OHIFStudyMetadata","metadata","OHIFSeriesMetadata","retrieveStudiesMetadata","studies","deleteStudyMetadataPromise","studyMetadataManager","makeCancelable","_promoteList","study","studyMetadata","filters","isFilterStrategy","promoted","_promoteStudyDisplaySet","list","values","searchMethod","listCopy","promotedCount","arrayValues","Object","keys","length","seriesInstanceUID","promotedResponse","getDisplaySets","valueToCompare","displaySet","SeriesInstanceUID","split","forEach","index","findIndex","bind","undefined","itemToPromote","splice","displaySets","_isQueryParamApplied","applied","validateFilterApplied","arrayToInspect","every","item","some","seriesInstanceUIDStr","validatePromoteApplied","isValid","resultSeries","series","validateMethod","_showUserMessage","queryParamApplied","dialog","show","showUserMessage","_addSeriesToStudy","sopClassHandlerModules","extensionManager","modules","getData","seriesMetadata","getSeriesByUID","updateSeries","addSeries","createAndAddDisplaySetsForSeries","derivedDisplaySets","getDerivedDatasets","Modality","_updateStudyMetadataManager","StudyInstanceUID","add","_updateStudyDisplaySets","createDisplaySets","_addDerivedDisplaySets","_thinStudyData","map","ViewerRetrieveStudyData","cancelableSeriesPromises","cancelableStudiesPromises","clearViewportSpecificData","setStudyData","useState","setError","setStudies","isStudyLoaded","setIsStudyLoaded","snackbarContext","useSnackbarContext","useContext","AppContext","appConfig","filterQueryParam","maxConcurrentMetadataRequests","processStudies","studiesData","Array","isArray","loadRemainingSeries","then","result","isCanceled","isQueryParamApplied","studyDidLoad","catch","log","finally","seriesLoader","loadNextSeries","hasNext","next","concurrentRequestsAllowed","getSeriesCount","promises","fill","Promise","all","remainingPromises","loadStudies","retrieveParams","push","splitQueryParameterCalls","enableGoogleCloudAdapter","purgeCancellablePromises","useCallback","cancel","remove","prevStudyInstanceUIDs","e","includes","purge","content","JSON","stringify","NotFound","ConnectedViewer","array","func","OHIF","redux","actions","isActive","a","active","connect","state","ownProps","activeServer","servers","find","dispatch","baseValues","getServers","name","wadoUriRoot","qidoRoot","wadoRoot","imageRendering","thumbnailRendering","type","supportsFuzzyMatching","qidoSupportsIncludeField","isValidServer","isEqualServer","toCompare","serverLength","toCompareLength","getActiveServer","pathUrl","getUrlBaseDicomWeb","GoogleCloudUtilServers","setServers","useServerFromUrl","previousServers","urlBasedServers","serverHasChanged","newServer","exists","useSelector","useDispatch"],"mappings":"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","file":"ViewerRouting.bundle.e15f6a8121174d31e94d.js","sourcesContent":["import { useLocation } from 'react-router-dom';\n\n/**\n * hook that builds on useLocation to parse\n * the query string for you.\n *\n * @name useQuery\n */\nexport default function() {\n  return new URLSearchParams(useLocation().search);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { utils, user } from '@ohif/core';\n//\nimport ConnectedViewerRetrieveStudyData from '../connectedComponents/ConnectedViewerRetrieveStudyData';\nimport useServer from '../customHooks/useServer';\nimport useQuery from '../customHooks/useQuery';\nconst { urlUtil: UrlUtil } = utils;\n\n/**\n * Get array of seriesUIDs from param or from queryString\n * @param {*} seriesInstanceUIDs\n * @param {*} location\n */\nconst getSeriesInstanceUIDs = (seriesInstanceUIDs, routeLocation) => {\n  const queryFilters = UrlUtil.queryString.getQueryFilters(routeLocation);\n  const querySeriesUIDs = queryFilters && queryFilters['seriesInstanceUID'];\n  const _seriesInstanceUIDs = seriesInstanceUIDs || querySeriesUIDs;\n\n  return UrlUtil.paramString.parseParam(_seriesInstanceUIDs);\n};\n\nfunction ViewerRouting({ match: routeMatch, location: routeLocation }) {\n  const {\n    project,\n    location,\n    dataset,\n    dicomStore,\n    studyInstanceUIDs,\n    seriesInstanceUIDs,\n  } = routeMatch.params;\n\n  // Set the user's default authToken for outbound DICOMWeb requests.\n  // Is only applied if target server does not set `requestOptions` property.\n  //\n  // See: `getAuthorizationHeaders.js`\n  let query = useQuery();\n  const authToken = query.get('token');\n\n  if (authToken) {\n    user.getAccessToken = () => authToken;\n  }\n\n  const server = useServer({ project, location, dataset, dicomStore });\n  const studyUIDs = UrlUtil.paramString.parseParam(studyInstanceUIDs);\n  const seriesUIDs = getSeriesInstanceUIDs(seriesInstanceUIDs, routeLocation);\n\n  if (server && studyUIDs) {\n    return (\n      <ConnectedViewerRetrieveStudyData\n        studyInstanceUIDs={studyUIDs}\n        seriesInstanceUIDs={seriesUIDs}\n      />\n    );\n  }\n\n  return null;\n}\n\nViewerRouting.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      studyInstanceUIDs: PropTypes.string.isRequired,\n      seriesInstanceUIDs: PropTypes.string,\n      dataset: PropTypes.string,\n      dicomStore: PropTypes.string,\n      location: PropTypes.string,\n      project: PropTypes.string,\n    }),\n  }),\n  location: PropTypes.any,\n};\n\nexport default ViewerRouting;\n","import React, { useEffect, useRef } from 'react';\nexport default function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","class GoogleCloudApi {\n  setAccessToken(accessToken) {\n    if (!accessToken) console.error('Access token is empty');\n    this.accessToken = accessToken;\n  }\n\n  get fetchConfig() {\n    if (!this.accessToken) throw new Error('OIDC access_token is not set');\n    return {\n      method: 'GET',\n      headers: {\n        Authorization: 'Bearer ' + this.accessToken,\n      },\n    };\n  }\n\n  get urlBase() {\n    return this.healthcareApiEndpoint || 'https://healthcare.googleapis.com/v1beta1';\n  }\n\n  set urlBase(url) {\n    this.healthcareApiEndpoint = url;\n  }\n\n  get urlBaseProject() {\n    return this.urlBase + `/projects`;\n  }\n\n  getUrlBaseDicomWeb(project, location, dataset, dicomStore) {\n    return (\n      this.urlBase +\n      `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}/dicomWeb`\n    );\n  }\n\n  getUrlPath(project, location, dataset, dicomStore) {\n    `/projects/${project}/locations/${location}/datasets/${dataset}/dicomStores/${dicomStore}`;\n  }\n\n  async doRequest(urlStr, config = {}, params = {}) {\n    const url = new URL(urlStr);\n    let data = null;\n    url.search = new URLSearchParams(params);\n\n    try {\n      const response = await fetch(url, { ...this.fetchConfig, config });\n      try {\n        data = await response.json();\n      } catch (err) {}\n      if (response.status >= 200 && response.status < 300 && data != null) {\n        if (data.nextPageToken != null) {\n          params.pageToken = data.nextPageToken;\n          let subPage = await this.doRequest(urlStr, config, params);\n          for (let key in data) {\n            if (data.hasOwnProperty(key)) {\n              data[key] = data[key].concat(subPage.data[key]);\n            }\n          }\n        }\n        return {\n          isError: false,\n          status: response.status,\n          data,\n        };\n      } else {\n        return {\n          isError: true,\n          status: response.status,\n          message:\n            (data && data.error && data.error.message) || 'Unknown error',\n        };\n      }\n    } catch (err) {\n      if (data && data.error) {\n        return {\n          isError: true,\n          status: err.status,\n          message: err.response.data.error.message || 'Unspecified error',\n        };\n      }\n      return {\n        isError: true,\n        message: (err && err.message) || 'Oops! Something went wrong',\n      };\n    }\n  }\n\n  async loadProjects() {\n    return this.doRequest(\n      'https://cloudresourcemanager.googleapis.com/v1/projects'\n    );\n  }\n\n  async loadLocations(projectId) {\n    return this.doRequest(`${this.urlBaseProject}/${projectId}/locations`);\n  }\n\n  async loadDatasets(projectId, locationId) {\n    return this.doRequest(\n      `${this.urlBaseProject}/${projectId}/locations/${locationId}/datasets`\n    );\n  }\n\n  async loadDicomStores(dataset) {\n    return this.doRequest(`${this.urlBase}/${dataset}/dicomStores`);\n  }\n}\n\nexport default new GoogleCloudApi();\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","import React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { metadata, studies, utils, log } from '@ohif/core';\nimport usePrevious from '../customHooks/usePrevious';\n\nimport ConnectedViewer from './ConnectedViewer.js';\nimport PropTypes from 'prop-types';\nimport { extensionManager } from './../App.js';\nimport { useSnackbarContext, ErrorPage } from '@ohif/ui';\n\n// Contexts\nimport AppContext from '../context/AppContext';\nimport NotFound from '../routes/NotFound';\n\nconst { OHIFStudyMetadata, OHIFSeriesMetadata } = metadata;\nconst { retrieveStudiesMetadata, deleteStudyMetadataPromise } = studies;\nconst { studyMetadataManager, makeCancelable } = utils;\n\nconst _promoteToFront = (list, values, searchMethod) => {\n  let listCopy = [...list];\n  let response = [];\n  let promotedCount = 0;\n\n  const arrayValues = values.split(',');\n  arrayValues.forEach(value => {\n    const index = listCopy.findIndex(searchMethod.bind(undefined, value));\n\n    if (index >= 0) {\n      const [itemToPromote] = listCopy.splice(index, 1);\n      response[promotedCount] = itemToPromote;\n      promotedCount++;\n    }\n  });\n\n  return {\n    promoted: promotedCount === arrayValues.length,\n    data: [...response, ...listCopy],\n  };\n};\n\n/**\n * Promote series to front if find found equivalent on filters object\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _promoteList = (study, studyMetadata, filters, isFilterStrategy) => {\n  let promoted = false;\n  // Promote only if no filter should be applied\n  if (!isFilterStrategy) {\n    promoted = _promoteStudyDisplaySet(study, studyMetadata, filters);\n  }\n\n  return promoted;\n};\n\nconst _promoteStudyDisplaySet = (study, studyMetadata, filters) => {\n  let promoted = false;\n  const queryParamsLength = Object.keys(filters).length;\n  const shouldPromoteToFront = queryParamsLength > 0;\n\n  if (shouldPromoteToFront) {\n    const { seriesInstanceUID } = filters;\n\n    const _seriesLookup = (valueToCompare, displaySet) => {\n      return displaySet.SeriesInstanceUID === valueToCompare;\n    };\n    const promotedResponse = _promoteToFront(\n      studyMetadata.getDisplaySets(),\n      seriesInstanceUID,\n      _seriesLookup\n    );\n\n    study.displaySets = promotedResponse.data;\n    promoted = promotedResponse.promoted;\n  }\n\n  return promoted;\n};\n\n/**\n * Method to identify if query param (from url) was applied to given list\n * @param {Object} study - study reference to promote series against\n * @param {Object} [filters] - Object containing filters to be applied\n * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n * @param {boolean} isFilterStrategy - if filtering by query param strategy ON\n */\nconst _isQueryParamApplied = (study, filters = {}, isFilterStrategy) => {\n  const { seriesInstanceUID } = filters;\n  let applied = true;\n  // skip in case no filter or no toast manager\n\n  if (!seriesInstanceUID) {\n    return applied;\n  }\n  const seriesInstanceUIDs = seriesInstanceUID.split(',');\n\n  let validateFilterApplied = () => {\n    const sameSize = arrayToInspect.length === seriesInstanceUIDs.length;\n    if (!sameSize) {\n      return;\n    }\n\n    return arrayToInspect.every(item =>\n      seriesInstanceUIDs.some(\n        seriesInstanceUIDStr => seriesInstanceUIDStr === item.SeriesInstanceUID\n      )\n    );\n  };\n\n  let validatePromoteApplied = () => {\n    let isValid = true;\n    for (let index = 0; index < seriesInstanceUIDs.length; index++) {\n      const seriesInstanceUIDStr = seriesInstanceUIDs[index];\n      const resultSeries = arrayToInspect[index];\n\n      if (\n        !resultSeries ||\n        resultSeries.SeriesInstanceUID !== seriesInstanceUIDStr\n      ) {\n        isValid = false;\n        break;\n      }\n    }\n    return isValid;\n  };\n\n  const { series = [], displaySets = [] } = study;\n  const arrayToInspect = isFilterStrategy ? series : displaySets;\n  const validateMethod = isFilterStrategy\n    ? validateFilterApplied\n    : validatePromoteApplied;\n\n  if (!arrayToInspect) {\n    applied = false;\n  } else {\n    applied = validateMethod();\n  }\n\n  return applied;\n};\nconst _showUserMessage = (queryParamApplied, message, dialog = {}) => {\n  if (queryParamApplied) {\n    return;\n  }\n\n  const { show: showUserMessage = () => {} } = dialog;\n  showUserMessage({\n    message,\n  });\n};\n\nconst _addSeriesToStudy = (studyMetadata, series) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n  const study = studyMetadata.getData();\n  const seriesMetadata = new OHIFSeriesMetadata(series, study);\n  const existingSeries = studyMetadata.getSeriesByUID(series.SeriesInstanceUID);\n  if (existingSeries) {\n    studyMetadata.updateSeries(series.SeriesInstanceUID, seriesMetadata);\n  } else {\n    studyMetadata.addSeries(seriesMetadata);\n  }\n\n  studyMetadata.createAndAddDisplaySetsForSeries(\n    sopClassHandlerModules,\n    seriesMetadata\n  );\n\n  study.displaySets = studyMetadata.getDisplaySets();\n  study.derivedDisplaySets = studyMetadata.getDerivedDatasets({\n    Modality: series.Modality,\n  });\n\n  _updateStudyMetadataManager(study, studyMetadata);\n};\n\nconst _updateStudyMetadataManager = (study, studyMetadata) => {\n  const { StudyInstanceUID } = study;\n\n  if (!studyMetadataManager.get(StudyInstanceUID)) {\n    studyMetadataManager.add(studyMetadata);\n  }\n};\n\nconst _updateStudyDisplaySets = (study, studyMetadata) => {\n  const sopClassHandlerModules =\n    extensionManager.modules['sopClassHandlerModule'];\n\n  if (!study.displaySets) {\n    study.displaySets = studyMetadata.createDisplaySets(sopClassHandlerModules);\n  }\n\n  if (study.derivedDisplaySets) {\n    studyMetadata._addDerivedDisplaySets(study.derivedDisplaySets);\n  }\n};\n\nconst _thinStudyData = study => {\n  return {\n    StudyInstanceUID: study.StudyInstanceUID,\n    series: study.series.map(item => ({\n      SeriesInstanceUID: item.SeriesInstanceUID,\n    })),\n  };\n};\n\nfunction ViewerRetrieveStudyData({\n  server,\n  studyInstanceUIDs,\n  seriesInstanceUIDs,\n  clearViewportSpecificData,\n  setStudyData,\n}) {\n  // hooks\n  const [error, setError] = useState(false);\n  const [studies, setStudies] = useState([]);\n  const [isStudyLoaded, setIsStudyLoaded] = useState(false);\n  const snackbarContext = useSnackbarContext();\n  const { appConfig = {} } = useContext(AppContext);\n  const {\n    filterQueryParam: isFilterStrategy = false,\n    maxConcurrentMetadataRequests,\n  } = appConfig;\n\n  let cancelableSeriesPromises;\n  let cancelableStudiesPromises;\n  /**\n   * Callback method when study is totally loaded\n   * @param {object} study study loaded\n   * @param {object} studyMetadata studyMetadata for given study\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filter.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const studyDidLoad = (study, studyMetadata, filters) => {\n    // User message\n    const promoted = _promoteList(\n      study,\n      studyMetadata,\n      filters,\n      isFilterStrategy\n    );\n\n    // Clear viewport to allow new promoted one to be displayed\n    if (promoted) {\n      clearViewportSpecificData(0);\n    }\n\n    const isQueryParamApplied = _isQueryParamApplied(\n      study,\n      filters,\n      isFilterStrategy\n    );\n    // Show message in case not promoted neither filtered but should to\n    _showUserMessage(\n      isQueryParamApplied,\n      'Query parameters were not totally applied. It might be using original series list for given study.',\n      snackbarContext\n    );\n\n    setStudies([...studies, study]);\n  };\n\n  /**\n   * Method to process studies. It will update displaySet, studyMetadata, load remaining series, ...\n   * @param {Array} studiesData Array of studies retrieved from server\n   * @param {Object} [filters] - Object containing filters to be applied\n   * @param {string} [filters.seriesInstanceUID] - series instance uid to filter results against\n   */\n  const processStudies = (studiesData, filters) => {\n    if (Array.isArray(studiesData) && studiesData.length > 0) {\n      // Map studies to new format, update metadata manager?\n      const studies = studiesData.map(study => {\n        setStudyData(study.StudyInstanceUID, _thinStudyData(study));\n        const studyMetadata = new OHIFStudyMetadata(\n          study,\n          study.StudyInstanceUID\n        );\n\n        _updateStudyDisplaySets(study, studyMetadata);\n        _updateStudyMetadataManager(study, studyMetadata);\n\n        // Attempt to load remaning series if any\n        cancelableSeriesPromises[study.StudyInstanceUID] = makeCancelable(\n          loadRemainingSeries(studyMetadata)\n        )\n          .then(result => {\n            if (result && !result.isCanceled) {\n              studyDidLoad(study, studyMetadata, filters);\n            }\n          })\n          .catch(error => {\n            if (error && !error.isCanceled) {\n              setError(error);\n              log.error(error);\n            }\n          })\n          .finally(() => {\n            setIsStudyLoaded(true);\n          });\n\n        return study;\n      });\n\n      setStudies(studies);\n    }\n  };\n\n  const forceRerender = () => setStudies(studies => [...studies]);\n\n  const loadRemainingSeries = async studyMetadata => {\n    const { seriesLoader } = studyMetadata.getData();\n    if (!seriesLoader) return;\n\n    const loadNextSeries = async () => {\n      if (!seriesLoader.hasNext()) return;\n      const series = await seriesLoader.next();\n      _addSeriesToStudy(studyMetadata, series);\n      forceRerender();\n      return loadNextSeries();\n    };\n\n    const concurrentRequestsAllowed =\n      maxConcurrentMetadataRequests || studyMetadata.getSeriesCount();\n    const promises = Array(concurrentRequestsAllowed)\n      .fill(null)\n      .map(loadNextSeries);\n    const remainingPromises = await Promise.all(promises);\n    setIsStudyLoaded(true);\n    return remainingPromises;\n  };\n\n  const loadStudies = async () => {\n    try {\n      const filters = {};\n      // Use the first, discard others\n      const seriesInstanceUID = seriesInstanceUIDs && seriesInstanceUIDs[0];\n      const retrieveParams = [server, studyInstanceUIDs];\n\n      if (seriesInstanceUID) {\n        filters.seriesInstanceUID = seriesInstanceUID;\n        // Query param filtering controlled by appConfig property\n        if (isFilterStrategy) {\n          retrieveParams.push(filters);\n        }\n      }\n\n      if (\n        appConfig.splitQueryParameterCalls ||\n        appConfig.enableGoogleCloudAdapter\n      ) {\n        retrieveParams.push(true); // Seperate SeriesInstanceUID filter calls.\n      }\n\n      cancelableStudiesPromises[studyInstanceUIDs] = makeCancelable(\n        retrieveStudiesMetadata(...retrieveParams)\n      )\n        .then(result => {\n          if (result && !result.isCanceled) {\n            processStudies(result, filters);\n          }\n        })\n        .catch(error => {\n          if (error && !error.isCanceled) {\n            setError(error);\n            log.error(error);\n          }\n        });\n    } catch (error) {\n      if (error) {\n        setError(error);\n        log.error(error);\n      }\n    }\n  };\n\n  const purgeCancellablePromises = useCallback(() => {\n    for (let studyInstanceUIDs in cancelableStudiesPromises) {\n      if ('cancel' in cancelableStudiesPromises[studyInstanceUIDs]) {\n        cancelableStudiesPromises[studyInstanceUIDs].cancel();\n      }\n    }\n\n    for (let studyInstanceUIDs in cancelableSeriesPromises) {\n      if ('cancel' in cancelableSeriesPromises[studyInstanceUIDs]) {\n        cancelableSeriesPromises[studyInstanceUIDs].cancel();\n        deleteStudyMetadataPromise(studyInstanceUIDs);\n        studyMetadataManager.remove(studyInstanceUIDs);\n      }\n    }\n  });\n\n  const prevStudyInstanceUIDs = usePrevious(studyInstanceUIDs);\n\n  useEffect(() => {\n    const hasStudyInstanceUIDsChanged = !(\n      prevStudyInstanceUIDs &&\n      prevStudyInstanceUIDs.every(e => studyInstanceUIDs.includes(e))\n    );\n\n    if (hasStudyInstanceUIDsChanged) {\n      studyMetadataManager.purge();\n      purgeCancellablePromises();\n    }\n  }, [prevStudyInstanceUIDs, purgeCancellablePromises, studyInstanceUIDs]);\n\n  useEffect(() => {\n    cancelableSeriesPromises = {};\n    cancelableStudiesPromises = {};\n    loadStudies();\n\n    return () => {\n      purgeCancellablePromises();\n    };\n  }, []);\n\n  if (error) {\n    const content = JSON.stringify(error);\n    if (content.includes('404') || content.includes('NOT_FOUND')) {\n      return <NotFound />;\n    }\n\n    return <NotFound message=\"Failed to retrieve study data\" />;\n  }\n\n  return (\n    <ConnectedViewer\n      studies={studies}\n      isStudyLoaded={isStudyLoaded}\n      studyInstanceUIDs={studyInstanceUIDs}\n    />\n  );\n}\n\nViewerRetrieveStudyData.propTypes = {\n  studyInstanceUIDs: PropTypes.array.isRequired,\n  seriesInstanceUIDs: PropTypes.array,\n  server: PropTypes.object,\n  clearViewportSpecificData: PropTypes.func.isRequired,\n  setStudyData: PropTypes.func.isRequired,\n};\n\nexport default ViewerRetrieveStudyData;\n","import { connect } from 'react-redux';\nimport ViewerRetrieveStudyData from './ViewerRetrieveStudyData.js';\nimport OHIF from '@ohif/core';\n\nconst { clearViewportSpecificData, setStudyData } = OHIF.redux.actions;\nconst isActive = a => a.active === true;\n\nconst mapStateToProps = (state, ownProps) => {\n  const activeServer = state.servers.servers.find(isActive);\n\n  return {\n    server: ownProps.server || activeServer,\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setStudyData: (StudyInstanceUID, data) => {\n      dispatch(setStudyData(StudyInstanceUID, data));\n    },\n    clearViewportSpecificData: () => {\n      dispatch(clearViewportSpecificData());\n    },\n  };\n};\n\nconst ConnectedViewerRetrieveStudyData = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewerRetrieveStudyData);\n\nexport default ConnectedViewerRetrieveStudyData;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","const getServers = (data, name) => {\n  const {\n    wadoUriRoot,\n    qidoRoot,\n    wadoRoot,\n    dataset = '',\n    dicomStore = '',\n    location = '',\n    project = '',\n  } = data;\n\n  return [\n    {\n      name: name,\n      dataset,\n      dicomStore,\n      location,\n      project,\n      imageRendering: 'wadors',\n      thumbnailRendering: 'wadors',\n      type: 'dicomWeb',\n      active: true,\n      wadoUriRoot,\n      qidoRoot,\n      wadoRoot,\n      supportsFuzzyMatching: false,\n      qidoSupportsIncludeField: false,\n    },\n  ];\n};\n\nconst isValidServer = server => {\n  return (\n    server &&\n    !!server.dataset &&\n    !!server.dicomStore &&\n    !!server.location &&\n    !!server.project\n  );\n};\n\nconst isEqualServer = (server = {}, toCompare = {}) => {\n  const serverLength = Object.keys(server).length;\n  const toCompareLength = Object.keys(toCompare).length;\n\n  if (!serverLength || !toCompareLength) {\n    return false;\n  }\n\n  return (\n    server.dataset === toCompare.dataset &&\n    server.dataset === toCompare.dataset &&\n    server.dicomStore === toCompare.dicomStore &&\n    server.location === toCompare.location &&\n    server.project === toCompare.project\n  );\n};\n\nexport { getServers, isValidServer, isEqualServer };\n","import React, { useContext } from 'react';\nimport GoogleCloudApi from '../googleCloud/api/GoogleCloudApi';\nimport usePrevious from './usePrevious';\n\nimport * as GoogleCloudUtilServers from '../googleCloud/utils/getServers';\nimport { useSelector, useDispatch } from 'react-redux';\nimport isEqual from 'lodash.isequal';\n\n// Contexts\nimport AppContext from '../context/AppContext';\n\nconst getActiveServer = servers => {\n  const isActive = a => a.active === true;\n\n  return servers && servers.servers && servers.servers.find(isActive);\n};\n\nconst getServers = (appConfig, project, location, dataset, dicomStore) => {\n  let servers = [];\n  if (appConfig.enableGoogleCloudAdapter) {\n    GoogleCloudApi.urlBase = appConfig.healthcareApiEndpoint;\n    const pathUrl = GoogleCloudApi.getUrlBaseDicomWeb(\n      project,\n      location,\n      dataset,\n      dicomStore\n    );\n    const data = {\n      project,\n      location,\n      dataset,\n      dicomStore,\n      wadoUriRoot: pathUrl,\n      qidoRoot: pathUrl,\n      wadoRoot: pathUrl,\n    };\n    servers = GoogleCloudUtilServers.getServers(data, dicomStore);\n    if (!isValidServer(servers[0], appConfig)) {\n      return;\n    }\n  }\n\n  return servers;\n};\n\nconst isValidServer = (server, appConfig) => {\n  if (appConfig.enableGoogleCloudAdapter) {\n    return GoogleCloudUtilServers.isValidServer(server);\n  }\n\n  return !!server;\n};\n\nconst setServers = (dispatch, servers) => {\n  const action = {\n    type: 'SET_SERVERS',\n    servers,\n  };\n  dispatch(action);\n};\n\nconst useServerFromUrl = (\n  servers = [],\n  previousServers,\n  activeServer,\n  urlBasedServers,\n  appConfig,\n  project,\n  location,\n  dataset,\n  dicomStore\n) => {\n  // update state from url available only when gcloud on\n  if (!appConfig.enableGoogleCloudAdapter) {\n    return false;\n  }\n\n  const serverHasChanged = previousServers !== servers && previousServers;\n\n  // do not update from url. use state instead.\n  if (serverHasChanged) {\n    return false;\n  }\n\n  // if no valid urlbased servers\n  if (!urlBasedServers || !urlBasedServers.length) {\n    return false;\n  } else if (!servers.length || !activeServer) {\n    // no current valid server\n    return true;\n  }\n\n  const newServer = urlBasedServers[0];\n\n  let exists = servers.some(\n    GoogleCloudUtilServers.isEqualServer.bind(undefined, newServer)\n  );\n\n  return !exists;\n};\n\nexport default function useServer({\n  project,\n  location,\n  dataset,\n  dicomStore,\n} = {}) {\n  // Hooks\n  const servers = useSelector(state => state && state.servers);\n  const previousServers = usePrevious(servers);\n  const dispatch = useDispatch();\n\n  const { appConfig = {} } = useContext(AppContext);\n\n  const activeServer = getActiveServer(servers);\n  const urlBasedServers =\n    getServers(appConfig, project, location, dataset, dicomStore) || [];\n  const shouldUpdateServer = useServerFromUrl(\n    servers.servers,\n    previousServers,\n    activeServer,\n    urlBasedServers,\n    appConfig,\n    project,\n    location,\n    dataset,\n    dicomStore\n  );\n\n  if (shouldUpdateServer) {\n    setServers(dispatch, urlBasedServers);\n  } else if (isValidServer(activeServer, appConfig)) {\n    return activeServer;\n  }\n}\n"],"sourceRoot":""}